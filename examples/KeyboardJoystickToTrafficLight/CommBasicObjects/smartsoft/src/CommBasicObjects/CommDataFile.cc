//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

#include "CommBasicObjects/CommDataFile.hh"

#include <cassert>
#include <cstring>
#include <fstream>

using namespace CommBasicObjects;

CommDataFile::CommDataFile()
:	CommDataFileCore()
{  }


/**
 * Constructor to set all values.
 * NOTE that you have to keep this constructor consistent with the model!
 * Use  at your own choice.
 *
 * The preferred way to set values for initialization is:
 *      CommRepository::MyCommObject obj;
 *      obj.setX(1).setY(2).setZ(3)...;
CommDataFile::CommDataFile(const std::string &filename, const unsigned int &filesize, const CommBasicObjects::CommTimeStamp &timestamp, const std::vector<char> &data, const bool &valid)
:	CommDataFileCore() // base constructor sets default values as defined in the model
{
	setFilename(filename);
	setFilesize(filesize);
	setTimestamp(timestamp);
	setData(data);
	setValid(valid);
}
 */

void CommDataFile::set_data_as_copy(const char* data, unsigned int size){
	//for(unsigned int i=0;i<get_size();++i){
	//	idl_CommVideoImage.data[i] = data[i];
	//}


	// does for our usecase only work when float's between corba and c++-type match!
	assert(sizeof(char) == sizeof(CommBasicObjectsIDL::CommDataFile_data_type::value_type));
	setFilesize(size);
	resizeData(size);
	memcpy(&idl_CommDataFile.data[0], data, size);
}



bool CommDataFile::readFromFile(std::string filename){
	std::ifstream filestream(filename.c_str(), std::ios::in|std::ios::binary|std::ios::ate);
	bool res = this->readFromFile(filestream);
	filestream.close();
	return res;
}

bool CommDataFile::writeToFile(std::string filename){
	std::ofstream filestream(filename.c_str(), std::ios::out | std::ifstream::binary);
	bool res = this->writeToFile(filestream);
	filestream.close();
	return res;
}

bool CommDataFile::readFromFile(std::ifstream& file){
	if(file){
		file.seekg (0, std::ios::end);
		std::streampos size = file.tellg();
		this->setFilesize(size);
		this->resizeData(size);

		file.seekg (0, std::ios::beg);
		if(file.read (&idl_CommDataFile.data[0], size)){
			file.sync();
			this->setValid(true);
			return true;
		} else {
			this->setValid(false);
			return false;
		}
	} else {
		this->setValid(false);
		return 0;
	}
}

bool CommDataFile::writeToFile(std::ofstream& file){
	if(file){
		std::streamsize fileSize = this->getDataSize();
		if (file.write(this->getDataRef().data(), fileSize))
		{
			file.flush();
			this->setValid(true);
			return true;
		} else {
			this->setValid(false);
			return false;
		}
	} else {
		this->setValid(false);
		return false;
	}
}






CommDataFile::CommDataFile(const CommDataFileCore &commDataFile)
:	CommDataFileCore(commDataFile)
{  }

CommDataFile::CommDataFile(const DATATYPE &commDataFile)
:	CommDataFileCore(commDataFile)
{  }

CommDataFile::~CommDataFile()
{  }
