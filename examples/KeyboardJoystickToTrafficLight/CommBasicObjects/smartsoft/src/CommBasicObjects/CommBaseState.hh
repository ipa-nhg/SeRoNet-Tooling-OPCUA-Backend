//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2003 Boris Kluge
//
//        schlegel@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Basic Communication Classes".
//  It provides basic standardized data types for communication between
//  different components in the mobile robotics context. These classes
//  are designed to be used in conjunction with the SmartSoft Communication
//  Library.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  (partly based on work by Christian Schlegel and Pablo d'Angelo)
//
// --------------------------------------------------------------------------


#ifndef COMMBASICOBJECTS_COMMBASESTATE_H_
#define COMMBASICOBJECTS_COMMBASESTATE_H_

#include "CommBasicObjects/CommBaseStateCore.hh"

namespace CommBasicObjects {

/**
  The state of a mobile robot at a given time.
  The state consists of the following components:
  <ul>
    <li>a time stamp when the state was present,
    <li>the position (i.e. the configuration) of the base, and
    <li>the velocity of the base.
  </ul>
  \sa Smart::CommTimeStamp Smart::CommBasePosition Smart::CommBaseVelocity
 */
class CommBaseState : public CommBaseStateCore {
	public:
		// default constructors
		CommBaseState();
		
		/**
		 * Constructor to set all values.
		 * NOTE that you have to keep this constructor consistent with the model!
		 * Use  at your own choice.
		 *
		 * The preferred way to set values for initialization is:
		 *      CommRepository::MyCommObject obj;
		 *      obj.setX(1).setY(2).setZ(3)...;
		 */
		// CommBaseState(const CommBasicObjects::CommTimeStamp &timeStamp, const CommBasicObjects::CommBasePose &basePose, const CommBasicObjects::CommBasePose &baseOdomPose, const CommBasicObjects::CommBaseVelocity &baseVelocity, const CommBasicObjects::CommBaseVelocity &baseOdomVelocity, const CommBasicObjects::CommBatteryLevel &batteryState);
		
		CommBaseState(const CommBaseStateCore &commBaseState);
		CommBaseState(const DATATYPE &commBaseState);
		virtual ~CommBaseState();
		
		// use framework specific getter and setter methods from core (base) class
		using CommBaseStateCore::get;
		using CommBaseStateCore::set;
		
		//
		// feel free to add customized methods here
		//
	    /**
		 Set the time stamp.
		 */
		inline void set_time_stamp(const CommTimeStamp &ts) {
			idl_CommBaseState.timeStamp = ts;
		}

		/**
		 Set the base position.
		 */
		inline void set_base_position(const CommBasePose &bp) {
			idl_CommBaseState.basePose = bp;
		}

		/**
		 Set the base raw position.
		 */
		inline void set_base_raw_position(const CommBasePose &bp) {
			idl_CommBaseState.baseOdomPose = bp;
		}

		/**
		 Set the base velocity.
		 */
		inline void set_base_velocity(const CommBaseVelocity &bv) {
			idl_CommBaseState.baseVelocity = bv;
		}

		/**
		 Get the time stamp.
		 */
		inline CommTimeStamp get_time_stamp() const {
			return CommTimeStamp(idl_CommBaseState.timeStamp);
		}

		/**
		 Get the base position.
		 */
		inline CommBasePose get_base_position() const {
			return CommBasePose(idl_CommBaseState.basePose);
		}

		/**
		 Get the base raw position.
		 */
		inline CommBasePose get_base_raw_position() const {
			return CommBasePose(idl_CommBaseState.baseOdomPose);
		}

		/**
		 Get the base velocity.
		 */
		inline CommBaseVelocity get_base_velocity() const {
			return CommBaseVelocity(idl_CommBaseState.baseVelocity);
		}

		/**
		 Get the battery level.
		 */
		inline CommBatteryLevel get_battery_state() const {
			return CommBatteryLevel(idl_CommBaseState.batteryState);
		}

		/**
		 Set the battery level.
		 */
		inline void set_battery_state(const CommBatteryLevel &bl)  {
			idl_CommBaseState.batteryState = bl;
		}

	//	/**
	//	 Return this basestate at time \a ts, assuming constant velocities.
	//	 */
	//	CommBaseState extrapolate(const CommTimeStamp &ts) const;
};

inline std::ostream &operator<<(std::ostream &os, const CommBaseState &co)
{
	co.to_ostream(os);
	return os;
}
	
} /* namespace CommBasicObjects */
#endif /* COMMBASICOBJECTS_COMMBASESTATE_H_ */
