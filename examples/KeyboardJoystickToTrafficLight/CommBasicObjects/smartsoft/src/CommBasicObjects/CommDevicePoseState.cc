//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2003 Boris Kluge
//
//        schlegel@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Basic Communication Classes".
//  It provides basic standardized data types for communication between
//  different components in the mobile robotics context. These classes
//  are designed to be used in conjunction with the SmartSoft Communication
//  Library.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  (partly based on work by Christian Schlegel and Pablo d'Angelo)
//
// --------------------------------------------------------------------------

#include "CommBasicObjects/CommDevicePoseState.hh"

#include "EulerTransformationMatrices.hh" // from utility

using namespace CommBasicObjects;

CommDevicePoseState::CommDevicePoseState()
:	CommDevicePoseStateCore()
{  }


/**
 * Constructor to set all values.
 * NOTE that you have to keep this constructor consistent with the model!
 * Use  at your own choice.
 *
 * The preferred way to set values for initialization is:
 *      CommRepository::MyCommObject obj;
 *      obj.setX(1).setY(2).setZ(3)...;
CommDevicePoseState::CommDevicePoseState(const CommBasicObjects::CommBaseState &stateBase, const CommBasicObjects::CommPose3d &devicePose)
:	CommDevicePoseStateCore() // base constructor sets default values as defined in the model
{
	setStateBase(stateBase);
	setDevicePose(devicePose);
}
 */

CommDevicePoseState::CommDevicePoseState(const CommDevicePoseStateCore &commDevicePoseState)
:	CommDevicePoseStateCore(commDevicePoseState)
{  }

CommDevicePoseState::CommDevicePoseState(const DATATYPE &commDevicePoseState)
:	CommDevicePoseStateCore(commDevicePoseState)
{  }

CommDevicePoseState::~CommDevicePoseState()
{  }

CommBasicObjects::CommPose3d CommDevicePoseState::get_device_pose3d_world() const
{
	arma::mat worldOffset;
	arma::mat deviceOffset;
	arma::mat offset;

	EulerTransformationMatrices::create_zyx_matrix(idl_CommDevicePoseState.stateBase.basePose.pose3D.position.x,
			idl_CommDevicePoseState.stateBase.basePose.pose3D.position.y, idl_CommDevicePoseState.stateBase.basePose.pose3D.position.z,
			idl_CommDevicePoseState.stateBase.basePose.pose3D.orientation.azimuth, idl_CommDevicePoseState.stateBase.basePose.pose3D.orientation.elevation, idl_CommDevicePoseState.stateBase.basePose.pose3D.orientation.roll, worldOffset);

	EulerTransformationMatrices::create_zyx_matrix(idl_CommDevicePoseState.devicePose.position.x,
			idl_CommDevicePoseState.devicePose.position.y, idl_CommDevicePoseState.devicePose.position.z,
			idl_CommDevicePoseState.devicePose.orientation.azimuth,
			idl_CommDevicePoseState.devicePose.orientation.elevation,
			idl_CommDevicePoseState.devicePose.orientation.roll, deviceOffset);

	offset = worldOffset * deviceOffset;
	return CommBasicObjects::CommPose3d(offset);
}
