//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2013 Matthias Lutz
//
//        schlegel@hs-ulm.de
//
//        ZAFH Servicerobotik Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Communication Classes".
//  It provides basic standardized data types for communication between
//  different components in the mobile robotics context. These classes
//  are designed to be used in conjunction with the SmartSoft Communication
//  Library.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------

#ifndef COMMBASICOBJECTS_COMMTCLMESSAGE_H_
#define COMMBASICOBJECTS_COMMTCLMESSAGE_H_

#include "CommBasicObjects/CommTCLMessageCore.hh"

namespace CommBasicObjects {
		
class CommTCLMessage : public CommTCLMessageCore {
	public:
		// default constructors
		CommTCLMessage();
		
		CommTCLMessage(const std::string &lisp){
			setLisp(lisp);
		}
		
		CommTCLMessage(const CommTCLMessageCore &commTCLMessage);
		CommTCLMessage(const DATATYPE &commTCLMessage);
		virtual ~CommTCLMessage();
		
		// use framework specific getter and setter methods from core (base) class
		using CommTCLMessageCore::get;
		using CommTCLMessageCore::set;
		
		//
		// feel free to add customized methods here
		//
	    std::string get_message() const { return getLisp(); }
		void set_message(const std::string &msg) { setLisp(msg); }
};

inline std::ostream &operator<<(std::ostream &os, const CommTCLMessage &co)
{
	co.to_ostream(os);
	return os;
}
	
} /* namespace CommBasicObjects */
#endif /* COMMBASICOBJECTS_COMMTCLMESSAGE_H_ */
