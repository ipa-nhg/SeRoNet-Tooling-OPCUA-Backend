//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2003 Boris Kluge
//
//        schlegel@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Basic Communication Classes".
//  It provides basic standardized data types for communication between
//  different components in the mobile robotics context. These classes
//  are designed to be used in conjunction with the SmartSoft Communication
//  Library.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  (partly based on work by Christian Schlegel and Pablo d'Angelo)
//
// --------------------------------------------------------------------------

#include "CommBasicObjects/CommMobileLaserScan.hh"

using namespace CommBasicObjects;

CommMobileLaserScan::CommMobileLaserScan()
:	CommMobileLaserScanCore()
{  }


/**
 * Constructor to set all values.
 * NOTE that you have to keep this constructor consistent with the model!
 * Use  at your own choice.
 *
 * The preferred way to set values for initialization is:
 *      CommRepository::MyCommObject obj;
 *      obj.setX(1).setY(2).setZ(3)...;
CommMobileLaserScan::CommMobileLaserScan(const CommBasicObjects::CommBaseState &base_state, const CommBasicObjects::LaserScan6DPose &laser_scan_pose, const CommBasicObjects::CommPose3d &laser_world_pose)
:	CommMobileLaserScanCore() // base constructor sets default values as defined in the model
{
	setBase_state(base_state);
	setLaser_scan_pose(laser_scan_pose);
	setLaser_world_pose(laser_world_pose);
}
 */

CommMobileLaserScan::CommMobileLaserScan(const CommMobileLaserScanCore &commMobileLaserScan)
:	CommMobileLaserScanCore(commMobileLaserScan)
{  }

CommMobileLaserScan::CommMobileLaserScan(const DATATYPE &commMobileLaserScan)
:	CommMobileLaserScanCore(commMobileLaserScan)
{  }

CommMobileLaserScan::~CommMobileLaserScan()
{  }

void CommMobileLaserScan::limit_scan_distance_integer(unsigned int max_dist)
{
  CommBasicObjectsIDL::CommLaserScan tmp_scan = idl_CommMobileLaserScan.laser_scan_pose.laser_scan;
  const unsigned int size = tmp_scan.scan_points.size();

  unsigned int num_points_to_remove = 0;
  for(unsigned int i=0; i<size; ++i)
  {
    if(tmp_scan.scan_points[i].distance > max_dist) ++num_points_to_remove;
  }

  idl_CommMobileLaserScan.laser_scan_pose.laser_scan.scan_points.resize(size - num_points_to_remove);
  unsigned int num_points_removed = 0;
  for(unsigned int i=0; i<size; ++i)
  {
    if(tmp_scan.scan_points[i].distance > max_dist)
    {
      ++num_points_removed;
    }
    else
    {
      idl_CommMobileLaserScan.laser_scan_pose.laser_scan.scan_points[i - num_points_removed] = tmp_scan.scan_points[i];
    }
  }
}
