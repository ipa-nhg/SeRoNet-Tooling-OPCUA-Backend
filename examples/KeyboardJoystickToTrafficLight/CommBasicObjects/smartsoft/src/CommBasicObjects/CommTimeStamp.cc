//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2003 Boris Kluge
//
//        schlegel@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Basic Communication Classes".
//  It provides basic standardized data types for communication between
//  different components in the mobile robotics context. These classes
//  are designed to be used in conjunction with the SmartSoft Communication
//  Library.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  (partly based on work by Christian Schlegel and Pablo d'Angelo)
//
// --------------------------------------------------------------------------

#include "CommBasicObjects/CommTimeStamp.hh"

#include <cmath>
#include <ctime>

#include <iomanip>
#include <sstream>

#include <ace/OS.h>

using namespace CommBasicObjects;

CommTimeStamp::CommTimeStamp()
:	CommTimeStampCore()
{  }


/**
 * Constructor to set all values.
 * NOTE that you have to keep this constructor consistent with the model!
 * Use  at your own choice.
 *
 * The preferred way to set values for initialization is:
 *      CommRepository::MyCommObject obj;
 *      obj.setX(1).setY(2).setZ(3)...;
CommTimeStamp::CommTimeStamp(const unsigned int &sec, const unsigned int &usec)
:	CommTimeStampCore() // base constructor sets default values as defined in the model
{
	setSec(sec);
	setUsec(usec);
}
 */

CommTimeStamp::CommTimeStamp(const CommTimeStampCore &commTimeStamp)
:	CommTimeStampCore(commTimeStamp)
{  }

CommTimeStamp::CommTimeStamp(const DATATYPE &commTimeStamp)
:	CommTimeStampCore(commTimeStamp)
{  }

CommTimeStamp::~CommTimeStamp()
{  }

std::string CommTimeStamp::get_string() const
{
  std::string date_time;
  time_t t = idl_CommTimeStamp.sec;
  unsigned int used_buffer_length;
  char buffer[50];
  used_buffer_length = ACE_OS::strftime(buffer, 50, "%Y-%m-%dT%H:%M:%S", localtime(&t));
  date_time = buffer;
  std::ostringstream oss;
  oss << "." << std::setw(6) << std::setfill('0') << idl_CommTimeStamp.usec;
  return date_time + oss.str();
}

void CommTimeStamp::set_now()
{
  ACE_Time_Value t = ACE_OS::gettimeofday();
  set(t);
}

CommTimeStamp CommTimeStamp::now()
{
  CommTimeStamp ts;
  ts.set_now();
  return ts;
}

CommTimeStamp& CommTimeStamp::advance(double dt)
{
  const int n_sec  = (int)::floor(dt); // may be negative
  const int n_usec = (int)::rint((dt - n_sec) * 1e6); // 0 <= n_usec < 1000000 holds by construction
  idl_CommTimeStamp.usec += n_usec;
  while(idl_CommTimeStamp.usec > 1000000)
  {
    idl_CommTimeStamp.usec -= 1000000;
    idl_CommTimeStamp.sec  += 1;
  }
  idl_CommTimeStamp.sec += n_sec;
  return *this;
}
