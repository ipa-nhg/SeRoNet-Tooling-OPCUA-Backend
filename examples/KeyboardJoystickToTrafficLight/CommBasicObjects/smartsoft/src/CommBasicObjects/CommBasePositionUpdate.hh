//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2003 Boris Kluge
//
//        schlegel@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Basic Communication Classes".
//  It provides basic standardized data types for communication between
//  different components in the mobile robotics context. These classes
//  are designed to be used in conjunction with the SmartSoft Communication
//  Library.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  (partly based on work by Christian Schlegel and Pablo d'Angelo)
//
// --------------------------------------------------------------------------


#ifndef COMMBASICOBJECTS_COMMBASEPOSITIONUPDATE_H_
#define COMMBASICOBJECTS_COMMBASEPOSITIONUPDATE_H_

#include "CommBasicObjects/CommBasePositionUpdateCore.hh"

namespace CommBasicObjects {
		
class CommBasePositionUpdate : public CommBasePositionUpdateCore {
	public:
		// default constructors
		CommBasePositionUpdate();
		
		/**
		 * Constructor to set all values.
		 * NOTE that you have to keep this constructor consistent with the model!
		 * Use  at your own choice.
		 *
		 * The preferred way to set values for initialization is:
		 *      CommRepository::MyCommObject obj;
		 *      obj.setX(1).setY(2).setZ(3)...;
		 */
		// CommBasePositionUpdate(const CommBasicObjects::CommTimeStamp &timeStamp, const CommBasicObjects::CommBasePose &pose, const CommBasicObjects::CommBasePose &correctedPose, const CommBasicObjects::CommBaseVelocity &velocity, const CommBasicObjects::CommBaseVelocity &correctedVelocity);
		
		CommBasePositionUpdate(const CommBasePositionUpdateCore &commBasePositionUpdate);
		CommBasePositionUpdate(const DATATYPE &commBasePositionUpdate);
		virtual ~CommBasePositionUpdate();
		
		// use framework specific getter and setter methods from core (base) class
		using CommBasePositionUpdateCore::get;
		using CommBasePositionUpdateCore::set;
		
		//
		// feel free to add customized methods here
		//
		  /**
		    Get the time stamp.
		   */
		  inline CommTimeStamp get_time_stamp() const { return CommTimeStamp(idl_CommBasePositionUpdate.timeStamp); }

		  /**
		    Get the old and inaccurate position.
		   */
		  inline CommBasePose get_old_position() const { return CommBasePose(idl_CommBasePositionUpdate.pose); }

		  /**
		    Get the new and corrected position.
		   */
		  inline CommBasePose get_corrected_position() const { return CommBasePose(idl_CommBasePositionUpdate.correctedPose); }

		  /**
		    Set the time stamp.
		   */
		  inline void set_time_stamp(const CommTimeStamp &ts) { idl_CommBasePositionUpdate.timeStamp = ts; }

		  /**
		    Set the old and inaccurate position.
		   */
		  inline void set_old_position(const CommBasePose &bp) { idl_CommBasePositionUpdate.pose = bp; }

		  /**
		    Set the new and corrected position.
		   */
		  inline void set_corrected_position(const CommBasePose &bp) { idl_CommBasePositionUpdate.correctedPose = bp; }
};

inline std::ostream &operator<<(std::ostream &os, const CommBasePositionUpdate &co)
{
	co.to_ostream(os);
	return os;
}
	
} /* namespace CommBasicObjects */
#endif /* COMMBASICOBJECTS_COMMBASEPOSITIONUPDATE_H_ */
