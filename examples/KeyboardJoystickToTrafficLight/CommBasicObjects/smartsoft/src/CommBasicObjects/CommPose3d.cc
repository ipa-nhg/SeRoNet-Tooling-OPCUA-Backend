//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2003 Boris Kluge
//
//        schlegel@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Basic Communication Classes".
//  It provides basic standardized data types for communication between
//  different components in the mobile robotics context. These classes
//  are designed to be used in conjunction with the SmartSoft Communication
//  Library.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  (partly based on work by Christian Schlegel and Pablo d'Angelo)
//
// --------------------------------------------------------------------------

#include "CommBasicObjects/CommPose3d.hh"

using namespace CommBasicObjects;

#include "EulerTransformationMatrices.hh" // from utility

CommPose3d::CommPose3d()
:	CommPose3dCore()
{  }


/**
 * Constructor to set all values.
 * NOTE that you have to keep this constructor consistent with the model!
 * Use  at your own choice.
 *
 * The preferred way to set values for initialization is:
 *      CommRepository::MyCommObject obj;
 *      obj.setX(1).setY(2).setZ(3)...;
CommPose3d::CommPose3d(const CommBasicObjects::CommPosition3d &position, const CommBasicObjects::CommOrientation3d &orientation)
:	CommPose3dCore() // base constructor sets default values as defined in the model
{
	setPosition(position);
	setOrientation(orientation);
}
 */

CommPose3d::CommPose3d(const CommPose3dCore &commPose3d)
:	CommPose3dCore(commPose3d)
{  }

CommPose3d::CommPose3d(const DATATYPE &commPose3d)
:	CommPose3dCore(commPose3d)
{  }

CommPose3d::CommPose3d(arma::mat &matrix, const double unit) {
	double x, y, z, azimuth, elevation, roll;

	EulerTransformationMatrices::zyx_from_matrix(matrix, x, y, z, azimuth,
			elevation, roll);
	set_x(x, unit);
	set_y(y, unit);
	set_z(z, unit);
	set_azimuth(azimuth);
	set_elevation(elevation);
	set_roll(roll);
}

CommPose3d::~CommPose3d()
{  }

arma::mat CommPose3d::getHomogeneousMatrix(const double unit) const
{
	arma::mat matrix(4, 4);
	EulerTransformationMatrices::create_zyx_matrix(get_x(unit),
			get_y(unit), get_z(unit), get_azimuth(), get_elevation(),
			get_roll(), matrix);
	return matrix;
}
