//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2014 Matthias Lutz
//
//        schlegel@hs-ulm.de
//
//        ZAFH Servicerobotik Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------


#include "CommBasicObjects/CommMobileIRScan.hh"

using namespace CommBasicObjects;

CommMobileIRScan::CommMobileIRScan()
:	CommMobileIRScanCore()
{  }


/**
 * Constructor to set all values.
 * NOTE that you have to keep this constructor consistent with the model!
 * Use  at your own choice.
 *
 * The preferred way to set values for initialization is:
 *      CommRepository::MyCommObject obj;
 *      obj.setX(1).setY(2).setZ(3)...;
CommMobileIRScan::CommMobileIRScan(const CommBasicObjects::CommBaseState &baseState, const CommBasicObjects::CommIRScan &irScan, const bool &is_valid)
:	CommMobileIRScanCore() // base constructor sets default values as defined in the model
{
	setIs_valid(is_valid);
	setBaseState(baseState);
	setIrScan(irScan);
}
 */

unsigned int CommMobileIRScan::get_scan_size(){
	return getIrScan().getDistancesSize();
}


/**
Return the distance of scan point \a i in units of \a unit meters.
*/
double CommMobileIRScan::get_scan_distance(unsigned int i, const double unit) const
{
	return getIrScan().get_scan_distance(i,unit);
}



/**
	Get cartesian information about scan point number \a i in the coordinate system of the scanner.
	The information is returned in reference arguments \a x and \a y in units
	of \a unit meters (default is 0.001 meters).
 */
void CommMobileIRScan::get_scan_cartesian_point_scanner(unsigned int i, double &x, double &y, const double unit) const
{
	getIrScan().get_scan_cartesian_point_scanner(i,x,y,unit);
}

/**
	Get cartesian information about scan point number \a i in the coordinate system of the robot.
	The information is returned in reference arguments \a x, \a y and \a z in units
	of \a unit meters (default is 0.001 meters).
 */

void CommMobileIRScan::get_scan_cartesian_3dpoint_robot(unsigned int i, double &x, double &y, double &z, const double unit) const
{
	getIrScan().get_scan_cartesian_3dpoint_robot(i,x,y,z,unit);
}

/**
	Get cartesian information about scan point number \a i in the coordinate system of the world.
	The information is returned in reference arguments \a x, \a y and \a z in units
	of \a unit meters (default is 0.001 meters).
 */
void CommMobileIRScan::get_scan_cartesian_3dpoint_world(unsigned int i, double &x, double &y, double &z, const double unit) const
{
	double sx,sy,sz = 0;
	get_scan_cartesian_3dpoint_robot(i,sx,sy,sz,unit);

	const double a = getBaseState().get_base_position().get_base_azimuth();
	const double e = getBaseState().get_base_position().get_base_elevation();
	const double r = getBaseState().get_base_position().get_base_roll();

	// rotate
	x = sx*cos(e)*cos(a) + sy*(-cos(r)*sin(a)+sin(r)*sin(e)*cos(a)) + sz*(sin(r)*sin(a)+cos(r)*sin(e)*cos(a));
	y = sx*cos(e)*sin(a) + sy*(cos(r)*cos(a)+sin(r)*sin(e)*sin(a)) + sz*(-sin(r)*cos(a)+cos(r)*sin(e)*sin(a));
	z = sx*-sin(e) + sy*sin(r)*cos(e) + sz*cos(r)*cos(e);

	// translate
	x += getBaseState().get_base_position().get_x(unit);
	y += getBaseState().get_base_position().get_y(unit);
	z += getBaseState().get_base_position().get_z(unit);
}

CommMobileIRScan::CommMobileIRScan(const CommMobileIRScanCore &commMobileIRScan)
:	CommMobileIRScanCore(commMobileIRScan)
{  }

CommMobileIRScan::CommMobileIRScan(const DATATYPE &commMobileIRScan)
:	CommMobileIRScanCore(commMobileIRScan)
{  }

CommMobileIRScan::~CommMobileIRScan()
{  }
