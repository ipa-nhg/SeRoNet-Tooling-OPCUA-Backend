//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2013 Timo Hegele
//
//        schlegel@hs-ulm.de
//
//        ZAFH Servicerobotik Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------

#include "CommBasicObjects/CommLaserScan.hh"

using namespace CommBasicObjects;

CommLaserScan::CommLaserScan()
:	CommLaserScanCore()
{  }


/**
 * Constructor to set all values.
 * NOTE that you have to keep this constructor consistent with the model!
 * Use  at your own choice.
 *
 * The preferred way to set values for initialization is:
 *      CommRepository::MyCommObject obj;
 *      obj.setX(1).setY(2).setZ(3)...;
CommLaserScan::CommLaserScan(const CommBasicObjects::CommTimeStamp &time, const std::vector<CommBasicObjects::LaserScanPoint> &scan_points, const unsigned short &max_scan_points, const bool &is_valid, const unsigned long int &update_count, const double &start_angle, const double &resolution, const unsigned short &distance_min, const unsigned short &distance_max, const unsigned short &length_unit)
:	CommLaserScanCore() // base constructor sets default values as defined in the model
{
	setIs_valid(is_valid);
	setTime(time);
	setUpdate_count(update_count);
	setStart_angle(start_angle);
	setResolution(resolution);
	setDistance_min(distance_min);
	setDistance_max(distance_max);
	setLength_unit(length_unit);
	setScan_points(scan_points);
	setMax_scan_points(max_scan_points);
}
 */

CommLaserScan::CommLaserScan(const CommLaserScanCore &commLaserScan)
:	CommLaserScanCore(commLaserScan)
{  }

CommLaserScan::CommLaserScan(const DATATYPE &commLaserScan)
:	CommLaserScanCore(commLaserScan)
{  }

CommLaserScan::~CommLaserScan()
{  }
