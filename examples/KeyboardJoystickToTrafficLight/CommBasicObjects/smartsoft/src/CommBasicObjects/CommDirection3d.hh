//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2003 Boris Kluge
//
//        schlegel@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Basic Communication Classes".
//  It provides basic standardized data types for communication between
//  different components in the mobile robotics context. These classes
//  are designed to be used in conjunction with the SmartSoft Communication
//  Library.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  (partly based on work by Christian Schlegel and Pablo d'Angelo)
//
// --------------------------------------------------------------------------

#ifndef COMMBASICOBJECTS_COMMDIRECTION3D_H_
#define COMMBASICOBJECTS_COMMDIRECTION3D_H_

#include "CommBasicObjects/CommDirection3dCore.hh"

namespace CommBasicObjects {
		
class CommDirection3d : public CommDirection3dCore {
	public:
		// default constructors
		CommDirection3d();
		
		/**
		 * Constructor to set all values.
		 * NOTE that you have to keep this constructor consistent with the model!
		 * Use  at your own choice.
		 *
		 * The preferred way to set values for initialization is:
		 *      CommRepository::MyCommObject obj;
		 *      obj.setX(1).setY(2).setZ(3)...;
		 */
		// CommDirection3d(const double &azimuth = 0.0, const double &elevation = 0.0);
		
		CommDirection3d(const CommDirection3dCore &commDirection3d);
		CommDirection3d(const DATATYPE &commDirection3d);
		virtual ~CommDirection3d();
		
		// use framework specific getter and setter methods from core (base) class
		using CommDirection3dCore::get;
		using CommDirection3dCore::set;
		
		//
		// feel free to add customized methods here
		//
		/**
		 Get the azimuth angle in radians.
		 */
		inline double get_azimuth() const {
			return getAzimuth();
		}

		/**
		 Get the elevation angle in radians.
		 */
		inline double get_elevation() const {
			return getElevation();
		}

		/**
		 Set the azimuth angle in radians.
		 */
		inline void set_azimuth(double a) {
			setAzimuth(a);
		}

		/**
		 Set the elevation angle in radians.
		 */
		inline void set_elevation(double e) {
			setElevation(e);
		}
};

inline std::ostream &operator<<(std::ostream &os, const CommDirection3d &co)
{
	co.to_ostream(os);
	return os;
}
	
} /* namespace CommBasicObjects */
#endif /* COMMBASICOBJECTS_COMMDIRECTION3D_H_ */
