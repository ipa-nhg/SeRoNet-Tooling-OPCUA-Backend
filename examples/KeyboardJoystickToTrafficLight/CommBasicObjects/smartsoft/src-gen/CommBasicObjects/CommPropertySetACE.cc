//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "CommBasicObjects/CommPropertySetACE.hh"
#include <ace/SString.h>
#include "CommBasicObjects/PropertySetEntryACE.hh"
#include "CommBasicObjects/PropertyItemEntryACE.hh"

// serialization operator for element CommPropertySet
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const CommBasicObjectsIDL::CommPropertySet &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element sets
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.sets.size());
	std::vector<CommBasicObjectsIDL::PropertySetEntry>::const_iterator data_setsIt;
	for(data_setsIt=data.sets.begin(); data_setsIt!=data.sets.end(); data_setsIt++) {
		good_bit = good_bit && cdr << *data_setsIt;
	}
	// serialize list-element items
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.items.size());
	std::vector<CommBasicObjectsIDL::PropertyItemEntry>::const_iterator data_itemsIt;
	for(data_itemsIt=data.items.begin(); data_itemsIt!=data.items.end(); data_itemsIt++) {
		good_bit = good_bit && cdr << *data_itemsIt;
	}
	
	return good_bit;
}

// de-serialization operator for element CommPropertySet
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, CommBasicObjectsIDL::CommPropertySet &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize list-type element sets
	ACE_CDR::ULong data_setsNbr;
	good_bit = good_bit && cdr >> data_setsNbr;
	data.sets.clear();
	CommBasicObjectsIDL::PropertySetEntry data_setsItem;
	for(ACE_CDR::ULong i=0; i<data_setsNbr; ++i) {
		good_bit = good_bit && cdr >> data_setsItem;
		data.sets.push_back(data_setsItem);
	}
	// deserialize list-type element items
	ACE_CDR::ULong data_itemsNbr;
	good_bit = good_bit && cdr >> data_itemsNbr;
	data.items.clear();
	CommBasicObjectsIDL::PropertyItemEntry data_itemsItem;
	for(ACE_CDR::ULong i=0; i<data_itemsNbr; ++i) {
		good_bit = good_bit && cdr >> data_itemsItem;
		data.items.push_back(data_itemsItem);
	}
	
	return good_bit;
}

// serialization operator for CommunicationObject CommPropertySet
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const CommBasicObjects::CommPropertySet &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject CommPropertySet
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, CommBasicObjects::CommPropertySet &obj)
{
	return cdr >> obj.set();
}
