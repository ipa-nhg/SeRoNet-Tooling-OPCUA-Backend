//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMBASICOBJECTS_COMMPROPERTYSET_CORE_H_
#define COMMBASICOBJECTS_COMMPROPERTYSET_CORE_H_

#include "CommBasicObjects/CommPropertySetData.hh"
#include "CommBasicObjects/PropertyItemEntry.hh"
#include "CommBasicObjects/PropertySetEntry.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommBasicObjects {
	
class CommPropertySetCore {
protected:
	// data structure
	CommBasicObjectsIDL::CommPropertySet idl_CommPropertySet;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommBasicObjectsIDL::CommPropertySet DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommPropertySetCore();
	CommPropertySetCore(const DATATYPE &data);
	// default destructor
	virtual ~CommPropertySetCore();
	
	const DATATYPE& get() const { return idl_CommPropertySet; }
	operator const DATATYPE&() const { return idl_CommPropertySet; }
	DATATYPE& set() { return idl_CommPropertySet; }

	static inline std::string identifier(void) { return "CommBasicObjects::CommPropertySet"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Sets
	/**
	 * Getter methods for element idl_CommPropertySet.sets of type vector<CommBasicObjects::PropertySetEntry>
	 */
	inline std::vector<CommBasicObjects::PropertySetEntry> getSetsCopy() const { 
		return std::vector<CommBasicObjects::PropertySetEntry>(idl_CommPropertySet.sets.begin(), idl_CommPropertySet.sets.end());
	}
	inline CommBasicObjects::PropertySetEntry getSetsElemAtPos(const size_t &pos) const {
		return CommBasicObjects::PropertySetEntry(idl_CommPropertySet.sets[pos]);
	}
	inline size_t getSetsSize() const { return idl_CommPropertySet.sets.size(); }
	inline bool isSetsEmpty() const { return idl_CommPropertySet.sets.empty(); }
	/**
	 * Setter methods for idl_CommPropertySet.sets of type vector<CommBasicObjects::PropertySetEntry>
	 */
	inline CommPropertySetCore& setSets(const std::vector<CommBasicObjects::PropertySetEntry> &sets) { 
		idl_CommPropertySet.sets.assign(sets.begin(), sets.end());
		return *this;
	}
	inline bool setSetsElemAtPos(const size_t &pos, const CommBasicObjects::PropertySetEntry &elem) {
		if(pos < idl_CommPropertySet.sets.size()) {
			idl_CommPropertySet.sets[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertSetsVectorAtPos(const size_t &pos, const std::vector<CommBasicObjects::PropertySetEntry> &data) {
		if(pos < idl_CommPropertySet.sets.size()) {
			idl_CommPropertySet.sets.insert(idl_CommPropertySet.sets.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeSets(const size_t &size) { idl_CommPropertySet.sets.resize(size); }
	inline bool eraseSetsElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommPropertySet.sets.size() ) {
			idl_CommPropertySet.sets.erase(idl_CommPropertySet.sets.begin()+pos, idl_CommPropertySet.sets.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearSets() { idl_CommPropertySet.sets.clear(); }
	
	// getter and setter for element Items
	/**
	 * Getter methods for element idl_CommPropertySet.items of type vector<CommBasicObjects::PropertyItemEntry>
	 */
	inline std::vector<CommBasicObjects::PropertyItemEntry> getItemsCopy() const { 
		return std::vector<CommBasicObjects::PropertyItemEntry>(idl_CommPropertySet.items.begin(), idl_CommPropertySet.items.end());
	}
	inline CommBasicObjects::PropertyItemEntry getItemsElemAtPos(const size_t &pos) const {
		return CommBasicObjects::PropertyItemEntry(idl_CommPropertySet.items[pos]);
	}
	inline size_t getItemsSize() const { return idl_CommPropertySet.items.size(); }
	inline bool isItemsEmpty() const { return idl_CommPropertySet.items.empty(); }
	/**
	 * Setter methods for idl_CommPropertySet.items of type vector<CommBasicObjects::PropertyItemEntry>
	 */
	inline CommPropertySetCore& setItems(const std::vector<CommBasicObjects::PropertyItemEntry> &items) { 
		idl_CommPropertySet.items.assign(items.begin(), items.end());
		return *this;
	}
	inline bool setItemsElemAtPos(const size_t &pos, const CommBasicObjects::PropertyItemEntry &elem) {
		if(pos < idl_CommPropertySet.items.size()) {
			idl_CommPropertySet.items[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertItemsVectorAtPos(const size_t &pos, const std::vector<CommBasicObjects::PropertyItemEntry> &data) {
		if(pos < idl_CommPropertySet.items.size()) {
			idl_CommPropertySet.items.insert(idl_CommPropertySet.items.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeItems(const size_t &size) { idl_CommPropertySet.items.resize(size); }
	inline bool eraseItemsElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommPropertySet.items.size() ) {
			idl_CommPropertySet.items.erase(idl_CommPropertySet.items.begin()+pos, idl_CommPropertySet.items.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearItems() { idl_CommPropertySet.items.clear(); }
};

} /* namespace CommBasicObjects */
#endif /* COMMBASICOBJECTS_COMMPROPERTYSET_CORE_H_ */
