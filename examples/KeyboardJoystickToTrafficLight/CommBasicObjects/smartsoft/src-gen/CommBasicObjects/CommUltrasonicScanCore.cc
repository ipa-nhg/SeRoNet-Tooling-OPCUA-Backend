//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "CommBasicObjects/CommUltrasonicScanCore.hh"

// serialization/deserialization operators
//#include "CommBasicObjects/CommUltrasonicScanACE.hh"

// include the hash.idl containing the hash constant
#include "hash.hh"
#include <assert.h>
#include <cstring>
#include <iostream>

// SmartUtils used in from_xml method
#include "smartKnuthMorrisPratt.hh"

#ifdef ENABLE_HASH
	#include <boost/functional/hash.hpp>
#endif

namespace CommBasicObjects 
{
	const char* CommUltrasonicScanCore::getCompiledHash()
	{
		return CommBasicObjectsIDL::REPO_HASH;
	}
	
	void CommUltrasonicScanCore::getAllHashValues(std::list<std::string> &hashes)
	{
		// get own hash value
		hashes.push_back(getCompiledHash());
		// get hash value(s) for CommBasicObjects::CommTimeStamp(idl_CommUltrasonicScan.timeStamp)
		CommBasicObjects::CommTimeStamp::getAllHashValues(hashes);
		// get hash value(s) for CommBasicObjects::CommPose3d(idl_CommUltrasonicScan.scanPoints)
		CommBasicObjects::CommPose3d::getAllHashValues(hashes);
	}
	
	void CommUltrasonicScanCore::checkAllHashValues(std::list<std::string> &hashes)
	{
		// check own hash value
		if (strcmp(getCompiledHash(), hashes.front().c_str()) != 0)
		{
			std::cerr << "###################################################" << std::endl;
			std::cerr << "WARNING: HASHES OF COMMUNICATION OBJECTS MISSMATCH!" << std::endl;
			std::cerr << "CommUltrasonicScanCore hash" << std::endl;
			std::cerr << "Expected: " << getCompiledHash() << std::endl;
			std::cerr << "Received: " << hashes.front() << std::endl;
			std::cerr << "###################################################" << std::endl;
		}
		assert(strcmp(getCompiledHash(), hashes.front().c_str()) == 0);
		hashes.pop_front();
		
		// check hash value(s) for CommBasicObjects::CommTimeStamp(idl_CommUltrasonicScan.timeStamp)
		CommBasicObjects::CommTimeStamp::checkAllHashValues(hashes);
		// check hash value(s) for CommBasicObjects::CommPose3d(idl_CommUltrasonicScan.scanPoints)
		CommBasicObjects::CommPose3d::checkAllHashValues(hashes);
	}
	
	#ifdef ENABLE_HASH
	size_t CommUltrasonicScanCore::generateDataHash(const DATATYPE &data)
	{
		size_t seed = 0;
		
		seed += CommBasicObjects::CommTimeStamp::generateDataHash(data.timeStamp);
		std::vector<CommBasicObjectsIDL::CommPose3d>::const_iterator data_scanPointsIt;
		for(data_scanPointsIt=data.scanPoints.begin(); data_scanPointsIt!=data.scanPoints.end(); data_scanPointsIt++) {
			seed += CommBasicObjects::CommPose3d::generateDataHash(*data_scanPointsIt);
		}
		std::vector<ACE_CDR::Double>::const_iterator data_intensitiesIt;
		for(data_intensitiesIt=data.intensities.begin(); data_intensitiesIt!=data.intensities.end(); data_intensitiesIt++) {
			boost::hash_combine(seed, *data_intensitiesIt);
		}
		
		return seed;
	}
	#endif
	
	// default constructor
	CommUltrasonicScanCore::CommUltrasonicScanCore()
	:	idl_CommUltrasonicScan()
	{  
		setTimeStamp(CommBasicObjects::CommTimeStamp());
		setScanPoints(std::vector<CommBasicObjects::CommPose3d>());
		setIntensities(std::vector<double>());
	}
	
	CommUltrasonicScanCore::CommUltrasonicScanCore(const DATATYPE &data)
	:	idl_CommUltrasonicScan(data)
	{  }

	CommUltrasonicScanCore::~CommUltrasonicScanCore()
	{  }
	
	void CommUltrasonicScanCore::to_ostream(std::ostream &os) const
	{
	  os << "CommUltrasonicScan(";
	  getTimeStamp().to_ostream(os);
	  std::vector<CommBasicObjects::CommPose3d>::const_iterator scanPointsIt;
	  std::vector<CommBasicObjects::CommPose3d> scanPointsList = getScanPointsCopy();
	  for(scanPointsIt=scanPointsList.begin(); scanPointsIt!=scanPointsList.end(); scanPointsIt++) {
	  	scanPointsIt->to_ostream(os);
	  }
	  std::vector<double>::const_iterator intensitiesIt;
	  std::vector<double> intensitiesList = getIntensitiesCopy();
	  for(intensitiesIt=intensitiesList.begin(); intensitiesIt!=intensitiesList.end(); intensitiesIt++) {
	  	os << *intensitiesIt << " ";
	  }
	  os << ") ";
	}
	
	// convert to xml stream
	void CommUltrasonicScanCore::to_xml(std::ostream &os, const std::string &indent) const {
		size_t counter = 0;
		
		os << indent << "<timeStamp>";
		getTimeStamp().to_xml(os, indent);
		os << indent << "</timeStamp>";
		std::vector<CommBasicObjects::CommPose3d>::const_iterator scanPointsIt;
		std::vector<CommBasicObjects::CommPose3d> scanPointsList = getScanPointsCopy();
		counter = 0;
		os << indent << "<scanPointsList n=\"" << scanPointsList.size() << "\">";
		for(scanPointsIt=scanPointsList.begin(); scanPointsIt!=scanPointsList.end(); scanPointsIt++) {
			os << indent << "<scanPoints i=\"" << counter++ << "\">";
			scanPointsIt->to_xml(os, indent);
			os << indent << "</scanPoints>";
		}
		os << indent << "</scanPointsList>";
		std::vector<double>::const_iterator intensitiesIt;
		std::vector<double> intensitiesList = getIntensitiesCopy();
		counter = 0;
		os << indent << "<intensitiesList n=\"" << intensitiesList.size() << "\">";
		for(intensitiesIt=intensitiesList.begin(); intensitiesIt!=intensitiesList.end(); intensitiesIt++) {
			os << indent << "<intensities i=\"" << counter++ << "\">" << *intensitiesIt << "</intensities>";
		}
		os << indent << "</intensitiesList>";
	}
	
	// restore from xml stream
	void CommUltrasonicScanCore::from_xml(std::istream &is) {
		size_t counter = 0;
		
		static const Smart::KnuthMorrisPratt kmp_timeStamp("<timeStamp>");
		static const Smart::KnuthMorrisPratt kmp_scanPointsList("<scanPointsList n=\"");
		static const Smart::KnuthMorrisPratt kmp_scanPoints("\">");
		static const Smart::KnuthMorrisPratt kmp_intensitiesList("<intensitiesList n=\"");
		static const Smart::KnuthMorrisPratt kmp_intensities("\">");
		
		if(kmp_timeStamp.search(is)) {
			CommBasicObjects::CommTimeStamp timeStampItem;
			timeStampItem.from_xml(is);
			setTimeStamp(timeStampItem);
		}
		if(kmp_scanPointsList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			CommBasicObjects::CommPose3d scanPointsItem;
			std::vector<CommBasicObjects::CommPose3d> scanPointsList;
			kmp_scanPoints.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_scanPoints.search(is)) {
					scanPointsItem.from_xml(is);
					scanPointsList.push_back(scanPointsItem);
				}
			}
			setScanPoints(scanPointsList);
		}
		if(kmp_intensitiesList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			double intensitiesItem;
			std::vector<double> intensitiesList;
			kmp_intensities.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_intensities.search(is)) {
					is >> intensitiesItem;
					intensitiesList.push_back(intensitiesItem);
				}
			}
			setIntensities(intensitiesList);
		}
	}
	
	/*
	void CommUltrasonicScanCore::get(ACE_Message_Block *&msg) const
	{
		// start with a default internal buffer size(will automatically grow if needed)
		ACE_OutputCDR cdr(ACE_DEFAULT_CDR_BUFSIZE);
		
		CommBasicObjectsIDL::HashList hashes;
		getAllHashValues(hashes);
		cdr << static_cast<ACE_CDR::Long>(hashes.size());
		for(CommBasicObjectsIDL::HashList::const_iterator it=hashes.begin(); it!=hashes.end(); it++)
		{
			cdr << ACE_CString(it->c_str());
		}
		
		// Here the actual serialization takes place using the OutputCDR serialization operator<<
		// (see CommUltrasonicScanACE.hh)
		cdr << idl_CommUltrasonicScan;
		
	#ifdef ENABLE_HASH
		ACE_CDR::ULong data_hash = generateDataHash(idl_CommUltrasonicScan);
		cdr << data_hash;
		// std::cout << "CommUltrasonicScanCore: current data hash: " << data_hash << std::endl;
	#endif
		
		// return a shallow copy of the serialized message 
		// (no data is actually copied, only the internal reference counter is incremented)
		// in order to prevent memory leaks the caller of this get(msg) method must
		// manually free the memory by calling the release() method of the message block msg
		msg = cdr.begin()->duplicate();
	}
	
	void CommUltrasonicScanCore::set(const ACE_Message_Block *msg)
	{
		ACE_InputCDR cdr(msg);
	
		CommBasicObjectsIDL::HashList hashes;
		ACE_CDR::Long hashes_size;
		cdr >> hashes_size;
		for(int i=0; i<hashes_size; ++i) 
		{
			ACE_CString hash;
			cdr >> hash;
			hashes.push_back(hash.c_str());
		}
		checkAllHashValues(hashes);
		
		// Here the actual de-serialization takes place using the InputCDR serialization operator>>
		// (see CommUltrasonicScanACE.hh)
		cdr >> idl_CommUltrasonicScan;
		
	#ifdef ENABLE_HASH
		ACE_CDR::Long data_hash;
		cdr >> data_hash;
		ACE_CDR::Long own_hash = generateDataHash(idl_CommUltrasonicScan);
		assert(data_hash == own_hash);
		// std::cout << "CommUltrasonicScanCore: own data hash: " << own_hash << "; received data hash: " << data_hash << std::endl;
	#endif
	}
	*/
} /* namespace CommBasicObjects */
