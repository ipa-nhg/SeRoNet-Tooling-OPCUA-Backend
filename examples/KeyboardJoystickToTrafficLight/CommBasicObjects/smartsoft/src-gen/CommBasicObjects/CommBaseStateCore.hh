//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMBASICOBJECTS_COMMBASESTATE_CORE_H_
#define COMMBASICOBJECTS_COMMBASESTATE_CORE_H_

#include "CommBasicObjects/CommBaseStateData.hh"
#include "CommBasicObjects/CommTimeStamp.hh"
#include "CommBasicObjects/CommBatteryLevel.hh"
#include "CommBasicObjects/CommBasePose.hh"
#include "CommBasicObjects/CommBaseVelocity.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommBasicObjects {
	
class CommBaseStateCore {
protected:
	// data structure
	CommBasicObjectsIDL::CommBaseState idl_CommBaseState;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommBasicObjectsIDL::CommBaseState DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommBaseStateCore();
	CommBaseStateCore(const DATATYPE &data);
	// default destructor
	virtual ~CommBaseStateCore();
	
	const DATATYPE& get() const { return idl_CommBaseState; }
	operator const DATATYPE&() const { return idl_CommBaseState; }
	DATATYPE& set() { return idl_CommBaseState; }

	static inline std::string identifier(void) { return "CommBasicObjects::CommBaseState"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element TimeStamp
	inline CommBasicObjects::CommTimeStamp getTimeStamp() const { return CommBasicObjects::CommTimeStamp(idl_CommBaseState.timeStamp); }
	inline CommBaseStateCore& setTimeStamp(const CommBasicObjects::CommTimeStamp &timeStamp) { idl_CommBaseState.timeStamp = timeStamp; return *this; }
	
	// getter and setter for element BasePose
	inline CommBasicObjects::CommBasePose getBasePose() const { return CommBasicObjects::CommBasePose(idl_CommBaseState.basePose); }
	inline CommBaseStateCore& setBasePose(const CommBasicObjects::CommBasePose &basePose) { idl_CommBaseState.basePose = basePose; return *this; }
	
	// getter and setter for element BaseOdomPose
	inline CommBasicObjects::CommBasePose getBaseOdomPose() const { return CommBasicObjects::CommBasePose(idl_CommBaseState.baseOdomPose); }
	inline CommBaseStateCore& setBaseOdomPose(const CommBasicObjects::CommBasePose &baseOdomPose) { idl_CommBaseState.baseOdomPose = baseOdomPose; return *this; }
	
	// getter and setter for element BaseVelocity
	inline CommBasicObjects::CommBaseVelocity getBaseVelocity() const { return CommBasicObjects::CommBaseVelocity(idl_CommBaseState.baseVelocity); }
	inline CommBaseStateCore& setBaseVelocity(const CommBasicObjects::CommBaseVelocity &baseVelocity) { idl_CommBaseState.baseVelocity = baseVelocity; return *this; }
	
	// getter and setter for element BaseOdomVelocity
	inline CommBasicObjects::CommBaseVelocity getBaseOdomVelocity() const { return CommBasicObjects::CommBaseVelocity(idl_CommBaseState.baseOdomVelocity); }
	inline CommBaseStateCore& setBaseOdomVelocity(const CommBasicObjects::CommBaseVelocity &baseOdomVelocity) { idl_CommBaseState.baseOdomVelocity = baseOdomVelocity; return *this; }
	
	// getter and setter for element BatteryState
	inline CommBasicObjects::CommBatteryLevel getBatteryState() const { return CommBasicObjects::CommBatteryLevel(idl_CommBaseState.batteryState); }
	inline CommBaseStateCore& setBatteryState(const CommBasicObjects::CommBatteryLevel &batteryState) { idl_CommBaseState.batteryState = batteryState; return *this; }
};

} /* namespace CommBasicObjects */
#endif /* COMMBASICOBJECTS_COMMBASESTATE_CORE_H_ */
