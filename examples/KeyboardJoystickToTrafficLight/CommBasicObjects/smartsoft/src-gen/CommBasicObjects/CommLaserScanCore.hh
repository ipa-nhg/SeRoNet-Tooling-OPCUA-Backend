//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMBASICOBJECTS_COMMLASERSCAN_CORE_H_
#define COMMBASICOBJECTS_COMMLASERSCAN_CORE_H_

#include "CommBasicObjects/CommLaserScanData.hh"
#include "CommBasicObjects/CommTimeStamp.hh"
#include "CommBasicObjects/LaserScanPoint.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommBasicObjects {
	
class CommLaserScanCore {
protected:
	// data structure
	CommBasicObjectsIDL::CommLaserScan idl_CommLaserScan;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommBasicObjectsIDL::CommLaserScan DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommLaserScanCore();
	CommLaserScanCore(const DATATYPE &data);
	// default destructor
	virtual ~CommLaserScanCore();
	
	const DATATYPE& get() const { return idl_CommLaserScan; }
	operator const DATATYPE&() const { return idl_CommLaserScan; }
	DATATYPE& set() { return idl_CommLaserScan; }

	static inline std::string identifier(void) { return "CommBasicObjects::CommLaserScan"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Is_valid
	inline bool getIs_valid() const { return idl_CommLaserScan.is_valid; }
	inline CommLaserScanCore& setIs_valid(const bool &is_valid) { idl_CommLaserScan.is_valid = is_valid; return *this; }
	
	// getter and setter for element Time
	inline CommBasicObjects::CommTimeStamp getTime() const { return CommBasicObjects::CommTimeStamp(idl_CommLaserScan.time); }
	inline CommLaserScanCore& setTime(const CommBasicObjects::CommTimeStamp &time) { idl_CommLaserScan.time = time; return *this; }
	
	// getter and setter for element Update_count
	inline unsigned long int getUpdate_count() const { return idl_CommLaserScan.update_count; }
	inline CommLaserScanCore& setUpdate_count(const unsigned long int &update_count) { idl_CommLaserScan.update_count = update_count; return *this; }
	
	// getter and setter for element Start_angle
	inline double getStart_angle() const { return idl_CommLaserScan.start_angle; }
	inline CommLaserScanCore& setStart_angle(const double &start_angle) { idl_CommLaserScan.start_angle = start_angle; return *this; }
	
	// getter and setter for element Resolution
	inline double getResolution() const { return idl_CommLaserScan.resolution; }
	inline CommLaserScanCore& setResolution(const double &resolution) { idl_CommLaserScan.resolution = resolution; return *this; }
	
	// getter and setter for element Distance_min
	inline unsigned short getDistance_min() const { return idl_CommLaserScan.distance_min; }
	inline CommLaserScanCore& setDistance_min(const unsigned short &distance_min) { idl_CommLaserScan.distance_min = distance_min; return *this; }
	
	// getter and setter for element Distance_max
	inline unsigned short getDistance_max() const { return idl_CommLaserScan.distance_max; }
	inline CommLaserScanCore& setDistance_max(const unsigned short &distance_max) { idl_CommLaserScan.distance_max = distance_max; return *this; }
	
	// getter and setter for element Length_unit
	inline unsigned short getLength_unit() const { return idl_CommLaserScan.length_unit; }
	inline CommLaserScanCore& setLength_unit(const unsigned short &length_unit) { idl_CommLaserScan.length_unit = length_unit; return *this; }
	
	// getter and setter for element Scan_points
	/**
	 * Getter methods for element idl_CommLaserScan.scan_points of type vector<CommBasicObjects::LaserScanPoint>
	 */
	inline std::vector<CommBasicObjects::LaserScanPoint> getScan_pointsCopy() const { 
		return std::vector<CommBasicObjects::LaserScanPoint>(idl_CommLaserScan.scan_points.begin(), idl_CommLaserScan.scan_points.end());
	}
	inline CommBasicObjects::LaserScanPoint getScan_pointsElemAtPos(const size_t &pos) const {
		return CommBasicObjects::LaserScanPoint(idl_CommLaserScan.scan_points[pos]);
	}
	inline size_t getScan_pointsSize() const { return idl_CommLaserScan.scan_points.size(); }
	inline bool isScan_pointsEmpty() const { return idl_CommLaserScan.scan_points.empty(); }
	/**
	 * Setter methods for idl_CommLaserScan.scan_points of type vector<CommBasicObjects::LaserScanPoint>
	 */
	inline CommLaserScanCore& setScan_points(const std::vector<CommBasicObjects::LaserScanPoint> &scan_points) { 
		idl_CommLaserScan.scan_points.assign(scan_points.begin(), scan_points.end());
		return *this;
	}
	inline bool setScan_pointsElemAtPos(const size_t &pos, const CommBasicObjects::LaserScanPoint &elem) {
		if(pos < idl_CommLaserScan.scan_points.size()) {
			idl_CommLaserScan.scan_points[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertScan_pointsVectorAtPos(const size_t &pos, const std::vector<CommBasicObjects::LaserScanPoint> &data) {
		if(pos < idl_CommLaserScan.scan_points.size()) {
			idl_CommLaserScan.scan_points.insert(idl_CommLaserScan.scan_points.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeScan_points(const size_t &size) { idl_CommLaserScan.scan_points.resize(size); }
	inline bool eraseScan_pointsElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommLaserScan.scan_points.size() ) {
			idl_CommLaserScan.scan_points.erase(idl_CommLaserScan.scan_points.begin()+pos, idl_CommLaserScan.scan_points.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearScan_points() { idl_CommLaserScan.scan_points.clear(); }
	
	// getter and setter for element Max_scan_points
	inline unsigned short getMax_scan_points() const { return idl_CommLaserScan.max_scan_points; }
	inline CommLaserScanCore& setMax_scan_points(const unsigned short &max_scan_points) { idl_CommLaserScan.max_scan_points = max_scan_points; return *this; }
};

} /* namespace CommBasicObjects */
#endif /* COMMBASICOBJECTS_COMMLASERSCAN_CORE_H_ */
