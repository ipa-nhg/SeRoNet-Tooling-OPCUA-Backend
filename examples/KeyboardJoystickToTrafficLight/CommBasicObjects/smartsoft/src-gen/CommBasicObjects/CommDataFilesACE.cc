//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "CommBasicObjects/CommDataFilesACE.hh"
#include <ace/SString.h>
#include "CommBasicObjects/CommFileMetaDataACE.hh"
#include "CommBasicObjects/CommTimeStampACE.hh"

// serialization operator for element CommDataFiles
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const CommBasicObjectsIDL::CommDataFiles &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element fileMetaData
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.fileMetaData.size());
	std::vector<CommBasicObjectsIDL::CommFileMetaData>::const_iterator data_fileMetaDataIt;
	for(data_fileMetaDataIt=data.fileMetaData.begin(); data_fileMetaDataIt!=data.fileMetaData.end(); data_fileMetaDataIt++) {
		good_bit = good_bit && cdr << *data_fileMetaDataIt;
	}
	// serialize list-element timestamp
	good_bit = good_bit && cdr << data.timestamp;
	// serialize list-element datastream
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.datastream.size());
	good_bit = good_bit && cdr.write_char_array(data.datastream.data(), data.datastream.size());
	// serialize list-element commpression
	good_bit = good_bit && cdr.write_boolean(data.commpression);
	// serialize list-element baseFileName
	good_bit = good_bit && cdr << ACE_CString(data.baseFileName.c_str());
	// serialize list-element isSingleFile
	good_bit = good_bit && cdr.write_boolean(data.isSingleFile);
	// serialize list-element valid
	good_bit = good_bit && cdr.write_boolean(data.valid);
	
	return good_bit;
}

// de-serialization operator for element CommDataFiles
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, CommBasicObjectsIDL::CommDataFiles &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize list-type element fileMetaData
	ACE_CDR::ULong data_fileMetaDataNbr;
	good_bit = good_bit && cdr >> data_fileMetaDataNbr;
	data.fileMetaData.clear();
	CommBasicObjectsIDL::CommFileMetaData data_fileMetaDataItem;
	for(ACE_CDR::ULong i=0; i<data_fileMetaDataNbr; ++i) {
		good_bit = good_bit && cdr >> data_fileMetaDataItem;
		data.fileMetaData.push_back(data_fileMetaDataItem);
	}
	// deserialize type element timestamp
	good_bit = good_bit && cdr >> data.timestamp;
	// deserialize list-type element datastream
	ACE_CDR::ULong data_datastreamNbr;
	good_bit = good_bit && cdr >> data_datastreamNbr;
	data.datastream.resize(data_datastreamNbr);
	good_bit = good_bit && cdr.read_char_array(data.datastream.data(), data_datastreamNbr);
	// deserialize type element commpression
	good_bit = good_bit && cdr.read_boolean(data.commpression);
	// deserialize string-type element baseFileName
	ACE_CString data_baseFileName_str;
	good_bit = good_bit && cdr >> data_baseFileName_str;
	data.baseFileName = data_baseFileName_str.c_str();
	// deserialize type element isSingleFile
	good_bit = good_bit && cdr.read_boolean(data.isSingleFile);
	// deserialize type element valid
	good_bit = good_bit && cdr.read_boolean(data.valid);
	
	return good_bit;
}

// serialization operator for CommunicationObject CommDataFiles
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const CommBasicObjects::CommDataFiles &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject CommDataFiles
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, CommBasicObjects::CommDataFiles &obj)
{
	return cdr >> obj.set();
}
