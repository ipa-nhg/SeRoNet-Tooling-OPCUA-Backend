//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMBASICOBJECTS_COMMMOBILELASERSCAN_CORE_H_
#define COMMBASICOBJECTS_COMMMOBILELASERSCAN_CORE_H_

#include "CommBasicObjects/CommMobileLaserScanData.hh"
#include "CommBasicObjects/LaserScan6DPose.hh"
#include "CommBasicObjects/CommPose3d.hh"
#include "CommBasicObjects/CommBaseState.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommBasicObjects {
	
class CommMobileLaserScanCore {
protected:
	// data structure
	CommBasicObjectsIDL::CommMobileLaserScan idl_CommMobileLaserScan;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommBasicObjectsIDL::CommMobileLaserScan DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommMobileLaserScanCore();
	CommMobileLaserScanCore(const DATATYPE &data);
	// default destructor
	virtual ~CommMobileLaserScanCore();
	
	const DATATYPE& get() const { return idl_CommMobileLaserScan; }
	operator const DATATYPE&() const { return idl_CommMobileLaserScan; }
	DATATYPE& set() { return idl_CommMobileLaserScan; }

	static inline std::string identifier(void) { return "CommBasicObjects::CommMobileLaserScan"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Base_state
	inline CommBasicObjects::CommBaseState getBase_state() const { return CommBasicObjects::CommBaseState(idl_CommMobileLaserScan.base_state); }
	inline CommMobileLaserScanCore& setBase_state(const CommBasicObjects::CommBaseState &base_state) { idl_CommMobileLaserScan.base_state = base_state; return *this; }
	
	// getter and setter for element Laser_scan_pose
	inline CommBasicObjects::LaserScan6DPose getLaser_scan_pose() const { return CommBasicObjects::LaserScan6DPose(idl_CommMobileLaserScan.laser_scan_pose); }
	inline CommMobileLaserScanCore& setLaser_scan_pose(const CommBasicObjects::LaserScan6DPose &laser_scan_pose) { idl_CommMobileLaserScan.laser_scan_pose = laser_scan_pose; return *this; }
	
	// getter and setter for element Laser_world_pose
	inline CommBasicObjects::CommPose3d getLaser_world_pose() const { return CommBasicObjects::CommPose3d(idl_CommMobileLaserScan.laser_world_pose); }
	inline CommMobileLaserScanCore& setLaser_world_pose(const CommBasicObjects::CommPose3d &laser_world_pose) { idl_CommMobileLaserScan.laser_world_pose = laser_world_pose; return *this; }
};

} /* namespace CommBasicObjects */
#endif /* COMMBASICOBJECTS_COMMMOBILELASERSCAN_CORE_H_ */
