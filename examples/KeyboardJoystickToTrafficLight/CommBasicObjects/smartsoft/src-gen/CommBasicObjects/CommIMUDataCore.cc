//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "CommBasicObjects/CommIMUDataCore.hh"

// serialization/deserialization operators
//#include "CommBasicObjects/CommIMUDataACE.hh"

// include the hash.idl containing the hash constant
#include "hash.hh"
#include <assert.h>
#include <cstring>
#include <iostream>

// SmartUtils used in from_xml method
#include "smartKnuthMorrisPratt.hh"

#ifdef ENABLE_HASH
	#include <boost/functional/hash.hpp>
#endif

namespace CommBasicObjects 
{
	const char* CommIMUDataCore::getCompiledHash()
	{
		return CommBasicObjectsIDL::REPO_HASH;
	}
	
	void CommIMUDataCore::getAllHashValues(std::list<std::string> &hashes)
	{
		// get own hash value
		hashes.push_back(getCompiledHash());
	}
	
	void CommIMUDataCore::checkAllHashValues(std::list<std::string> &hashes)
	{
		// check own hash value
		if (strcmp(getCompiledHash(), hashes.front().c_str()) != 0)
		{
			std::cerr << "###################################################" << std::endl;
			std::cerr << "WARNING: HASHES OF COMMUNICATION OBJECTS MISSMATCH!" << std::endl;
			std::cerr << "CommIMUDataCore hash" << std::endl;
			std::cerr << "Expected: " << getCompiledHash() << std::endl;
			std::cerr << "Received: " << hashes.front() << std::endl;
			std::cerr << "###################################################" << std::endl;
		}
		assert(strcmp(getCompiledHash(), hashes.front().c_str()) == 0);
		hashes.pop_front();
		
	}
	
	#ifdef ENABLE_HASH
	size_t CommIMUDataCore::generateDataHash(const DATATYPE &data)
	{
		size_t seed = 0;
		
		boost::hash_combine(seed, data.timestamp);
		boost::hash_combine(seed, data.temperature);
		boost::hash_combine(seed, data.accelerometer_x);
		boost::hash_combine(seed, data.accelerometer_y);
		boost::hash_combine(seed, data.accelerometer_z);
		boost::hash_combine(seed, data.gyroscope_x);
		boost::hash_combine(seed, data.gyroscope_y);
		boost::hash_combine(seed, data.gyroscope_z);
		boost::hash_combine(seed, data.magnetometer_x);
		boost::hash_combine(seed, data.magnetometer_y);
		boost::hash_combine(seed, data.magnetometer_z);
		boost::hash_combine(seed, data.roll);
		boost::hash_combine(seed, data.pitch);
		boost::hash_combine(seed, data.yaw);
		
		return seed;
	}
	#endif
	
	// default constructor
	CommIMUDataCore::CommIMUDataCore()
	:	idl_CommIMUData()
	{  
		setTimestamp(0);
		setTemperature(0.0);
		setAccelerometer_x(0.0);
		setAccelerometer_y(0.0);
		setAccelerometer_z(0.0);
		setGyroscope_x(0.0);
		setGyroscope_y(0.0);
		setGyroscope_z(0.0);
		setMagnetometer_x(0.0);
		setMagnetometer_y(0.0);
		setMagnetometer_z(0.0);
		setRoll(0.0);
		setPitch(0.0);
		setYaw(0.0);
	}
	
	CommIMUDataCore::CommIMUDataCore(const DATATYPE &data)
	:	idl_CommIMUData(data)
	{  }

	CommIMUDataCore::~CommIMUDataCore()
	{  }
	
	void CommIMUDataCore::to_ostream(std::ostream &os) const
	{
	  os << "CommIMUData(";
	  os << getTimestamp() << " ";
	  os << getTemperature() << " ";
	  os << getAccelerometer_x() << " ";
	  os << getAccelerometer_y() << " ";
	  os << getAccelerometer_z() << " ";
	  os << getGyroscope_x() << " ";
	  os << getGyroscope_y() << " ";
	  os << getGyroscope_z() << " ";
	  os << getMagnetometer_x() << " ";
	  os << getMagnetometer_y() << " ";
	  os << getMagnetometer_z() << " ";
	  os << getRoll() << " ";
	  os << getPitch() << " ";
	  os << getYaw() << " ";
	  os << ") ";
	}
	
	// convert to xml stream
	void CommIMUDataCore::to_xml(std::ostream &os, const std::string &indent) const {
		os << indent << "<timestamp>" << getTimestamp() << "</timestamp>";
		os << indent << "<temperature>" << getTemperature() << "</temperature>";
		os << indent << "<accelerometer_x>" << getAccelerometer_x() << "</accelerometer_x>";
		os << indent << "<accelerometer_y>" << getAccelerometer_y() << "</accelerometer_y>";
		os << indent << "<accelerometer_z>" << getAccelerometer_z() << "</accelerometer_z>";
		os << indent << "<gyroscope_x>" << getGyroscope_x() << "</gyroscope_x>";
		os << indent << "<gyroscope_y>" << getGyroscope_y() << "</gyroscope_y>";
		os << indent << "<gyroscope_z>" << getGyroscope_z() << "</gyroscope_z>";
		os << indent << "<magnetometer_x>" << getMagnetometer_x() << "</magnetometer_x>";
		os << indent << "<magnetometer_y>" << getMagnetometer_y() << "</magnetometer_y>";
		os << indent << "<magnetometer_z>" << getMagnetometer_z() << "</magnetometer_z>";
		os << indent << "<roll>" << getRoll() << "</roll>";
		os << indent << "<pitch>" << getPitch() << "</pitch>";
		os << indent << "<yaw>" << getYaw() << "</yaw>";
	}
	
	// restore from xml stream
	void CommIMUDataCore::from_xml(std::istream &is) {
		static const Smart::KnuthMorrisPratt kmp_timestamp("<timestamp>");
		static const Smart::KnuthMorrisPratt kmp_temperature("<temperature>");
		static const Smart::KnuthMorrisPratt kmp_accelerometer_x("<accelerometer_x>");
		static const Smart::KnuthMorrisPratt kmp_accelerometer_y("<accelerometer_y>");
		static const Smart::KnuthMorrisPratt kmp_accelerometer_z("<accelerometer_z>");
		static const Smart::KnuthMorrisPratt kmp_gyroscope_x("<gyroscope_x>");
		static const Smart::KnuthMorrisPratt kmp_gyroscope_y("<gyroscope_y>");
		static const Smart::KnuthMorrisPratt kmp_gyroscope_z("<gyroscope_z>");
		static const Smart::KnuthMorrisPratt kmp_magnetometer_x("<magnetometer_x>");
		static const Smart::KnuthMorrisPratt kmp_magnetometer_y("<magnetometer_y>");
		static const Smart::KnuthMorrisPratt kmp_magnetometer_z("<magnetometer_z>");
		static const Smart::KnuthMorrisPratt kmp_roll("<roll>");
		static const Smart::KnuthMorrisPratt kmp_pitch("<pitch>");
		static const Smart::KnuthMorrisPratt kmp_yaw("<yaw>");
		
		if(kmp_timestamp.search(is)) {
			unsigned short timestampItem;
			is >> timestampItem;
			setTimestamp(timestampItem);
		}
		if(kmp_temperature.search(is)) {
			double temperatureItem;
			is >> temperatureItem;
			setTemperature(temperatureItem);
		}
		if(kmp_accelerometer_x.search(is)) {
			double accelerometer_xItem;
			is >> accelerometer_xItem;
			setAccelerometer_x(accelerometer_xItem);
		}
		if(kmp_accelerometer_y.search(is)) {
			double accelerometer_yItem;
			is >> accelerometer_yItem;
			setAccelerometer_y(accelerometer_yItem);
		}
		if(kmp_accelerometer_z.search(is)) {
			double accelerometer_zItem;
			is >> accelerometer_zItem;
			setAccelerometer_z(accelerometer_zItem);
		}
		if(kmp_gyroscope_x.search(is)) {
			double gyroscope_xItem;
			is >> gyroscope_xItem;
			setGyroscope_x(gyroscope_xItem);
		}
		if(kmp_gyroscope_y.search(is)) {
			double gyroscope_yItem;
			is >> gyroscope_yItem;
			setGyroscope_y(gyroscope_yItem);
		}
		if(kmp_gyroscope_z.search(is)) {
			double gyroscope_zItem;
			is >> gyroscope_zItem;
			setGyroscope_z(gyroscope_zItem);
		}
		if(kmp_magnetometer_x.search(is)) {
			double magnetometer_xItem;
			is >> magnetometer_xItem;
			setMagnetometer_x(magnetometer_xItem);
		}
		if(kmp_magnetometer_y.search(is)) {
			double magnetometer_yItem;
			is >> magnetometer_yItem;
			setMagnetometer_y(magnetometer_yItem);
		}
		if(kmp_magnetometer_z.search(is)) {
			double magnetometer_zItem;
			is >> magnetometer_zItem;
			setMagnetometer_z(magnetometer_zItem);
		}
		if(kmp_roll.search(is)) {
			double rollItem;
			is >> rollItem;
			setRoll(rollItem);
		}
		if(kmp_pitch.search(is)) {
			double pitchItem;
			is >> pitchItem;
			setPitch(pitchItem);
		}
		if(kmp_yaw.search(is)) {
			double yawItem;
			is >> yawItem;
			setYaw(yawItem);
		}
	}
	
	/*
	void CommIMUDataCore::get(ACE_Message_Block *&msg) const
	{
		// start with a default internal buffer size(will automatically grow if needed)
		ACE_OutputCDR cdr(ACE_DEFAULT_CDR_BUFSIZE);
		
		CommBasicObjectsIDL::HashList hashes;
		getAllHashValues(hashes);
		cdr << static_cast<ACE_CDR::Long>(hashes.size());
		for(CommBasicObjectsIDL::HashList::const_iterator it=hashes.begin(); it!=hashes.end(); it++)
		{
			cdr << ACE_CString(it->c_str());
		}
		
		// Here the actual serialization takes place using the OutputCDR serialization operator<<
		// (see CommIMUDataACE.hh)
		cdr << idl_CommIMUData;
		
	#ifdef ENABLE_HASH
		ACE_CDR::ULong data_hash = generateDataHash(idl_CommIMUData);
		cdr << data_hash;
		// std::cout << "CommIMUDataCore: current data hash: " << data_hash << std::endl;
	#endif
		
		// return a shallow copy of the serialized message 
		// (no data is actually copied, only the internal reference counter is incremented)
		// in order to prevent memory leaks the caller of this get(msg) method must
		// manually free the memory by calling the release() method of the message block msg
		msg = cdr.begin()->duplicate();
	}
	
	void CommIMUDataCore::set(const ACE_Message_Block *msg)
	{
		ACE_InputCDR cdr(msg);
	
		CommBasicObjectsIDL::HashList hashes;
		ACE_CDR::Long hashes_size;
		cdr >> hashes_size;
		for(int i=0; i<hashes_size; ++i) 
		{
			ACE_CString hash;
			cdr >> hash;
			hashes.push_back(hash.c_str());
		}
		checkAllHashValues(hashes);
		
		// Here the actual de-serialization takes place using the InputCDR serialization operator>>
		// (see CommIMUDataACE.hh)
		cdr >> idl_CommIMUData;
		
	#ifdef ENABLE_HASH
		ACE_CDR::Long data_hash;
		cdr >> data_hash;
		ACE_CDR::Long own_hash = generateDataHash(idl_CommIMUData);
		assert(data_hash == own_hash);
		// std::cout << "CommIMUDataCore: own data hash: " << own_hash << "; received data hash: " << data_hash << std::endl;
	#endif
	}
	*/
} /* namespace CommBasicObjects */
