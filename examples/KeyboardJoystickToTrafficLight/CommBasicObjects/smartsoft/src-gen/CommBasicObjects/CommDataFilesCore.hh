//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMBASICOBJECTS_COMMDATAFILES_CORE_H_
#define COMMBASICOBJECTS_COMMDATAFILES_CORE_H_

#include "CommBasicObjects/CommDataFilesData.hh"
#include "CommBasicObjects/CommTimeStamp.hh"
#include "CommBasicObjects/CommFileMetaData.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommBasicObjects {
	
class CommDataFilesCore {
protected:
	// data structure
	CommBasicObjectsIDL::CommDataFiles idl_CommDataFiles;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommBasicObjectsIDL::CommDataFiles DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommDataFilesCore();
	CommDataFilesCore(const DATATYPE &data);
	// default destructor
	virtual ~CommDataFilesCore();
	
	const DATATYPE& get() const { return idl_CommDataFiles; }
	operator const DATATYPE&() const { return idl_CommDataFiles; }
	DATATYPE& set() { return idl_CommDataFiles; }

	static inline std::string identifier(void) { return "CommBasicObjects::CommDataFiles"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element FileMetaData
	/**
	 * Getter methods for element idl_CommDataFiles.fileMetaData of type vector<CommBasicObjects::CommFileMetaData>
	 */
	inline std::vector<CommBasicObjects::CommFileMetaData> getFileMetaDataCopy() const { 
		return std::vector<CommBasicObjects::CommFileMetaData>(idl_CommDataFiles.fileMetaData.begin(), idl_CommDataFiles.fileMetaData.end());
	}
	inline CommBasicObjects::CommFileMetaData getFileMetaDataElemAtPos(const size_t &pos) const {
		return CommBasicObjects::CommFileMetaData(idl_CommDataFiles.fileMetaData[pos]);
	}
	inline size_t getFileMetaDataSize() const { return idl_CommDataFiles.fileMetaData.size(); }
	inline bool isFileMetaDataEmpty() const { return idl_CommDataFiles.fileMetaData.empty(); }
	/**
	 * Setter methods for idl_CommDataFiles.fileMetaData of type vector<CommBasicObjects::CommFileMetaData>
	 */
	inline CommDataFilesCore& setFileMetaData(const std::vector<CommBasicObjects::CommFileMetaData> &fileMetaData) { 
		idl_CommDataFiles.fileMetaData.assign(fileMetaData.begin(), fileMetaData.end());
		return *this;
	}
	inline bool setFileMetaDataElemAtPos(const size_t &pos, const CommBasicObjects::CommFileMetaData &elem) {
		if(pos < idl_CommDataFiles.fileMetaData.size()) {
			idl_CommDataFiles.fileMetaData[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertFileMetaDataVectorAtPos(const size_t &pos, const std::vector<CommBasicObjects::CommFileMetaData> &data) {
		if(pos < idl_CommDataFiles.fileMetaData.size()) {
			idl_CommDataFiles.fileMetaData.insert(idl_CommDataFiles.fileMetaData.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeFileMetaData(const size_t &size) { idl_CommDataFiles.fileMetaData.resize(size); }
	inline bool eraseFileMetaDataElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommDataFiles.fileMetaData.size() ) {
			idl_CommDataFiles.fileMetaData.erase(idl_CommDataFiles.fileMetaData.begin()+pos, idl_CommDataFiles.fileMetaData.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearFileMetaData() { idl_CommDataFiles.fileMetaData.clear(); }
	
	// getter and setter for element Timestamp
	inline CommBasicObjects::CommTimeStamp getTimestamp() const { return CommBasicObjects::CommTimeStamp(idl_CommDataFiles.timestamp); }
	inline CommDataFilesCore& setTimestamp(const CommBasicObjects::CommTimeStamp &timestamp) { idl_CommDataFiles.timestamp = timestamp; return *this; }
	
	// getter and setter for element Datastream
	/**
	 * Getter methods for idl_CommDataFiles.datastream of type vector<char>
	 */
	inline std::vector<char>& getDatastreamRef() { return idl_CommDataFiles.datastream; }
	inline std::vector<char> getDatastreamCopy() const {
		return std::vector<char>(idl_CommDataFiles.datastream.begin(), idl_CommDataFiles.datastream.end());
	}
	inline char getDatastreamElemAtPos(const size_t &pos) const { return idl_CommDataFiles.datastream[pos]; }
	inline size_t getDatastreamSize() const { return idl_CommDataFiles.datastream.size(); }
	inline bool isDatastreamEmpty() const { return idl_CommDataFiles.datastream.empty(); }
	/**
	 * Setter methods for idl_CommDataFiles.datastream of type vector<char>
	 */
	inline CommDataFilesCore& setDatastream(const std::vector<char> &datastream) { idl_CommDataFiles.datastream = datastream; return *this; }
	inline bool setDatastreamElemAtPos(const size_t &pos, const char &elem) {
		if(pos < idl_CommDataFiles.datastream.size()) {
			idl_CommDataFiles.datastream[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertDatastreamVectorAtPos(const size_t &pos, const std::vector<char> &data) {
		if(pos < idl_CommDataFiles.datastream.size()) {
			idl_CommDataFiles.datastream.insert(idl_CommDataFiles.datastream.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeDatastream(const size_t &size) { idl_CommDataFiles.datastream.resize(size); }
	inline bool eraseDatastreamElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommDataFiles.datastream.size() ) {
			idl_CommDataFiles.datastream.erase(idl_CommDataFiles.datastream.begin()+pos, idl_CommDataFiles.datastream.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearDatastream() { idl_CommDataFiles.datastream.clear(); }
	
	// getter and setter for element Commpression
	inline bool getCommpression() const { return idl_CommDataFiles.commpression; }
	inline CommDataFilesCore& setCommpression(const bool &commpression) { idl_CommDataFiles.commpression = commpression; return *this; }
	
	// getter and setter for element BaseFileName
	inline std::string getBaseFileName() const { return idl_CommDataFiles.baseFileName; }
	inline CommDataFilesCore& setBaseFileName(const std::string &baseFileName) { idl_CommDataFiles.baseFileName = baseFileName; return *this; }
	
	// getter and setter for element IsSingleFile
	inline bool getIsSingleFile() const { return idl_CommDataFiles.isSingleFile; }
	inline CommDataFilesCore& setIsSingleFile(const bool &isSingleFile) { idl_CommDataFiles.isSingleFile = isSingleFile; return *this; }
	
	// getter and setter for element Valid
	inline bool getValid() const { return idl_CommDataFiles.valid; }
	inline CommDataFilesCore& setValid(const bool &valid) { idl_CommDataFiles.valid = valid; return *this; }
};

} /* namespace CommBasicObjects */
#endif /* COMMBASICOBJECTS_COMMDATAFILES_CORE_H_ */
