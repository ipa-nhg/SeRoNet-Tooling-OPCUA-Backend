//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "CommBasicObjects/CommUltrasonicScanACE.hh"
#include <ace/SString.h>
#include "CommBasicObjects/CommTimeStampACE.hh"
#include "CommBasicObjects/CommPose3dACE.hh"

// serialization operator for element CommUltrasonicScan
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const CommBasicObjectsIDL::CommUltrasonicScan &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element timeStamp
	good_bit = good_bit && cdr << data.timeStamp;
	// serialize list-element scanPoints
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.scanPoints.size());
	std::vector<CommBasicObjectsIDL::CommPose3d>::const_iterator data_scanPointsIt;
	for(data_scanPointsIt=data.scanPoints.begin(); data_scanPointsIt!=data.scanPoints.end(); data_scanPointsIt++) {
		good_bit = good_bit && cdr << *data_scanPointsIt;
	}
	// serialize list-element intensities
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.intensities.size());
	good_bit = good_bit && cdr.write_double_array(data.intensities.data(), data.intensities.size());
	
	return good_bit;
}

// de-serialization operator for element CommUltrasonicScan
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, CommBasicObjectsIDL::CommUltrasonicScan &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize type element timeStamp
	good_bit = good_bit && cdr >> data.timeStamp;
	// deserialize list-type element scanPoints
	ACE_CDR::ULong data_scanPointsNbr;
	good_bit = good_bit && cdr >> data_scanPointsNbr;
	data.scanPoints.clear();
	CommBasicObjectsIDL::CommPose3d data_scanPointsItem;
	for(ACE_CDR::ULong i=0; i<data_scanPointsNbr; ++i) {
		good_bit = good_bit && cdr >> data_scanPointsItem;
		data.scanPoints.push_back(data_scanPointsItem);
	}
	// deserialize list-type element intensities
	ACE_CDR::ULong data_intensitiesNbr;
	good_bit = good_bit && cdr >> data_intensitiesNbr;
	data.intensities.resize(data_intensitiesNbr);
	good_bit = good_bit && cdr.read_double_array(data.intensities.data(), data_intensitiesNbr);
	
	return good_bit;
}

// serialization operator for CommunicationObject CommUltrasonicScan
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const CommBasicObjects::CommUltrasonicScan &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject CommUltrasonicScan
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, CommBasicObjects::CommUltrasonicScan &obj)
{
	return cdr >> obj.set();
}
