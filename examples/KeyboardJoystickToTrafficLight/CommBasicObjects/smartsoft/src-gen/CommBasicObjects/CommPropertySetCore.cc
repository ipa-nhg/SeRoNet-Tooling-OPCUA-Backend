//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "CommBasicObjects/CommPropertySetCore.hh"

// serialization/deserialization operators
//#include "CommBasicObjects/CommPropertySetACE.hh"

// include the hash.idl containing the hash constant
#include "hash.hh"
#include <assert.h>
#include <cstring>
#include <iostream>

// SmartUtils used in from_xml method
#include "smartKnuthMorrisPratt.hh"

#ifdef ENABLE_HASH
	#include <boost/functional/hash.hpp>
#endif

namespace CommBasicObjects 
{
	const char* CommPropertySetCore::getCompiledHash()
	{
		return CommBasicObjectsIDL::REPO_HASH;
	}
	
	void CommPropertySetCore::getAllHashValues(std::list<std::string> &hashes)
	{
		// get own hash value
		hashes.push_back(getCompiledHash());
		// get hash value(s) for CommBasicObjects::PropertySetEntry(idl_CommPropertySet.sets)
		CommBasicObjects::PropertySetEntry::getAllHashValues(hashes);
		// get hash value(s) for CommBasicObjects::PropertyItemEntry(idl_CommPropertySet.items)
		CommBasicObjects::PropertyItemEntry::getAllHashValues(hashes);
	}
	
	void CommPropertySetCore::checkAllHashValues(std::list<std::string> &hashes)
	{
		// check own hash value
		if (strcmp(getCompiledHash(), hashes.front().c_str()) != 0)
		{
			std::cerr << "###################################################" << std::endl;
			std::cerr << "WARNING: HASHES OF COMMUNICATION OBJECTS MISSMATCH!" << std::endl;
			std::cerr << "CommPropertySetCore hash" << std::endl;
			std::cerr << "Expected: " << getCompiledHash() << std::endl;
			std::cerr << "Received: " << hashes.front() << std::endl;
			std::cerr << "###################################################" << std::endl;
		}
		assert(strcmp(getCompiledHash(), hashes.front().c_str()) == 0);
		hashes.pop_front();
		
		// check hash value(s) for CommBasicObjects::PropertySetEntry(idl_CommPropertySet.sets)
		CommBasicObjects::PropertySetEntry::checkAllHashValues(hashes);
		// check hash value(s) for CommBasicObjects::PropertyItemEntry(idl_CommPropertySet.items)
		CommBasicObjects::PropertyItemEntry::checkAllHashValues(hashes);
	}
	
	#ifdef ENABLE_HASH
	size_t CommPropertySetCore::generateDataHash(const DATATYPE &data)
	{
		size_t seed = 0;
		
		std::vector<CommBasicObjectsIDL::PropertySetEntry>::const_iterator data_setsIt;
		for(data_setsIt=data.sets.begin(); data_setsIt!=data.sets.end(); data_setsIt++) {
			seed += CommBasicObjects::PropertySetEntry::generateDataHash(*data_setsIt);
		}
		std::vector<CommBasicObjectsIDL::PropertyItemEntry>::const_iterator data_itemsIt;
		for(data_itemsIt=data.items.begin(); data_itemsIt!=data.items.end(); data_itemsIt++) {
			seed += CommBasicObjects::PropertyItemEntry::generateDataHash(*data_itemsIt);
		}
		
		return seed;
	}
	#endif
	
	// default constructor
	CommPropertySetCore::CommPropertySetCore()
	:	idl_CommPropertySet()
	{  
		setSets(std::vector<CommBasicObjects::PropertySetEntry>());
		setItems(std::vector<CommBasicObjects::PropertyItemEntry>());
	}
	
	CommPropertySetCore::CommPropertySetCore(const DATATYPE &data)
	:	idl_CommPropertySet(data)
	{  }

	CommPropertySetCore::~CommPropertySetCore()
	{  }
	
	void CommPropertySetCore::to_ostream(std::ostream &os) const
	{
	  os << "CommPropertySet(";
	  std::vector<CommBasicObjects::PropertySetEntry>::const_iterator setsIt;
	  std::vector<CommBasicObjects::PropertySetEntry> setsList = getSetsCopy();
	  for(setsIt=setsList.begin(); setsIt!=setsList.end(); setsIt++) {
	  	setsIt->to_ostream(os);
	  }
	  std::vector<CommBasicObjects::PropertyItemEntry>::const_iterator itemsIt;
	  std::vector<CommBasicObjects::PropertyItemEntry> itemsList = getItemsCopy();
	  for(itemsIt=itemsList.begin(); itemsIt!=itemsList.end(); itemsIt++) {
	  	itemsIt->to_ostream(os);
	  }
	  os << ") ";
	}
	
	// convert to xml stream
	void CommPropertySetCore::to_xml(std::ostream &os, const std::string &indent) const {
		size_t counter = 0;
		
		std::vector<CommBasicObjects::PropertySetEntry>::const_iterator setsIt;
		std::vector<CommBasicObjects::PropertySetEntry> setsList = getSetsCopy();
		counter = 0;
		os << indent << "<setsList n=\"" << setsList.size() << "\">";
		for(setsIt=setsList.begin(); setsIt!=setsList.end(); setsIt++) {
			os << indent << "<sets i=\"" << counter++ << "\">";
			setsIt->to_xml(os, indent);
			os << indent << "</sets>";
		}
		os << indent << "</setsList>";
		std::vector<CommBasicObjects::PropertyItemEntry>::const_iterator itemsIt;
		std::vector<CommBasicObjects::PropertyItemEntry> itemsList = getItemsCopy();
		counter = 0;
		os << indent << "<itemsList n=\"" << itemsList.size() << "\">";
		for(itemsIt=itemsList.begin(); itemsIt!=itemsList.end(); itemsIt++) {
			os << indent << "<items i=\"" << counter++ << "\">";
			itemsIt->to_xml(os, indent);
			os << indent << "</items>";
		}
		os << indent << "</itemsList>";
	}
	
	// restore from xml stream
	void CommPropertySetCore::from_xml(std::istream &is) {
		size_t counter = 0;
		
		static const Smart::KnuthMorrisPratt kmp_setsList("<setsList n=\"");
		static const Smart::KnuthMorrisPratt kmp_sets("\">");
		static const Smart::KnuthMorrisPratt kmp_itemsList("<itemsList n=\"");
		static const Smart::KnuthMorrisPratt kmp_items("\">");
		
		if(kmp_setsList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			CommBasicObjects::PropertySetEntry setsItem;
			std::vector<CommBasicObjects::PropertySetEntry> setsList;
			kmp_sets.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_sets.search(is)) {
					setsItem.from_xml(is);
					setsList.push_back(setsItem);
				}
			}
			setSets(setsList);
		}
		if(kmp_itemsList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			CommBasicObjects::PropertyItemEntry itemsItem;
			std::vector<CommBasicObjects::PropertyItemEntry> itemsList;
			kmp_items.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_items.search(is)) {
					itemsItem.from_xml(is);
					itemsList.push_back(itemsItem);
				}
			}
			setItems(itemsList);
		}
	}
	
	/*
	void CommPropertySetCore::get(ACE_Message_Block *&msg) const
	{
		// start with a default internal buffer size(will automatically grow if needed)
		ACE_OutputCDR cdr(ACE_DEFAULT_CDR_BUFSIZE);
		
		CommBasicObjectsIDL::HashList hashes;
		getAllHashValues(hashes);
		cdr << static_cast<ACE_CDR::Long>(hashes.size());
		for(CommBasicObjectsIDL::HashList::const_iterator it=hashes.begin(); it!=hashes.end(); it++)
		{
			cdr << ACE_CString(it->c_str());
		}
		
		// Here the actual serialization takes place using the OutputCDR serialization operator<<
		// (see CommPropertySetACE.hh)
		cdr << idl_CommPropertySet;
		
	#ifdef ENABLE_HASH
		ACE_CDR::ULong data_hash = generateDataHash(idl_CommPropertySet);
		cdr << data_hash;
		// std::cout << "CommPropertySetCore: current data hash: " << data_hash << std::endl;
	#endif
		
		// return a shallow copy of the serialized message 
		// (no data is actually copied, only the internal reference counter is incremented)
		// in order to prevent memory leaks the caller of this get(msg) method must
		// manually free the memory by calling the release() method of the message block msg
		msg = cdr.begin()->duplicate();
	}
	
	void CommPropertySetCore::set(const ACE_Message_Block *msg)
	{
		ACE_InputCDR cdr(msg);
	
		CommBasicObjectsIDL::HashList hashes;
		ACE_CDR::Long hashes_size;
		cdr >> hashes_size;
		for(int i=0; i<hashes_size; ++i) 
		{
			ACE_CString hash;
			cdr >> hash;
			hashes.push_back(hash.c_str());
		}
		checkAllHashValues(hashes);
		
		// Here the actual de-serialization takes place using the InputCDR serialization operator>>
		// (see CommPropertySetACE.hh)
		cdr >> idl_CommPropertySet;
		
	#ifdef ENABLE_HASH
		ACE_CDR::Long data_hash;
		cdr >> data_hash;
		ACE_CDR::Long own_hash = generateDataHash(idl_CommPropertySet);
		assert(data_hash == own_hash);
		// std::cout << "CommPropertySetCore: own data hash: " << own_hash << "; received data hash: " << data_hash << std::endl;
	#endif
	}
	*/
} /* namespace CommBasicObjects */
