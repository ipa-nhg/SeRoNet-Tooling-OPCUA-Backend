//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMBASICOBJECTS_COMMBATTERYLEVEL_CORE_H_
#define COMMBASICOBJECTS_COMMBATTERYLEVEL_CORE_H_

#include "CommBasicObjects/CommBatteryLevelData.hh"
#include "CommBasicObjects/CommTimeStamp.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommBasicObjects {
	
class CommBatteryLevelCore {
protected:
	// data structure
	CommBasicObjectsIDL::CommBatteryLevel idl_CommBatteryLevel;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommBasicObjectsIDL::CommBatteryLevel DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommBatteryLevelCore();
	CommBatteryLevelCore(const DATATYPE &data);
	// default destructor
	virtual ~CommBatteryLevelCore();
	
	const DATATYPE& get() const { return idl_CommBatteryLevel; }
	operator const DATATYPE&() const { return idl_CommBatteryLevel; }
	DATATYPE& set() { return idl_CommBatteryLevel; }

	static inline std::string identifier(void) { return "CommBasicObjects::CommBatteryLevel"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Potential
	inline double getPotential() const { return idl_CommBatteryLevel.potential; }
	inline CommBatteryLevelCore& setPotential(const double &potential) { idl_CommBatteryLevel.potential = potential; return *this; }
	
	// getter and setter for element ChargeLevel
	inline int getChargeLevel() const { return idl_CommBatteryLevel.chargeLevel; }
	inline CommBatteryLevelCore& setChargeLevel(const int &chargeLevel) { idl_CommBatteryLevel.chargeLevel = chargeLevel; return *this; }
	
	// getter and setter for element LifeTime
	inline CommBasicObjects::CommTimeStamp getLifeTime() const { return CommBasicObjects::CommTimeStamp(idl_CommBatteryLevel.lifeTime); }
	inline CommBatteryLevelCore& setLifeTime(const CommBasicObjects::CommTimeStamp &lifeTime) { idl_CommBatteryLevel.lifeTime = lifeTime; return *this; }
	
	// getter and setter for element TimeStamp
	inline CommBasicObjects::CommTimeStamp getTimeStamp() const { return CommBasicObjects::CommTimeStamp(idl_CommBatteryLevel.timeStamp); }
	inline CommBatteryLevelCore& setTimeStamp(const CommBasicObjects::CommTimeStamp &timeStamp) { idl_CommBatteryLevel.timeStamp = timeStamp; return *this; }
	
	// getter and setter for element Current
	inline double getCurrent() const { return idl_CommBatteryLevel.current; }
	inline CommBatteryLevelCore& setCurrent(const double &current) { idl_CommBatteryLevel.current = current; return *this; }
	
	// getter and setter for element ExternalPower
	inline bool getExternalPower() const { return idl_CommBatteryLevel.externalPower; }
	inline CommBatteryLevelCore& setExternalPower(const bool &externalPower) { idl_CommBatteryLevel.externalPower = externalPower; return *this; }
};

} /* namespace CommBasicObjects */
#endif /* COMMBASICOBJECTS_COMMBATTERYLEVEL_CORE_H_ */
