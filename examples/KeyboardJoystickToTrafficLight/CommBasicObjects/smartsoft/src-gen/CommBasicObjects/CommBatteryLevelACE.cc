//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "CommBasicObjects/CommBatteryLevelACE.hh"
#include <ace/SString.h>
#include "CommBasicObjects/CommTimeStampACE.hh"

// serialization operator for element CommBatteryLevel
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const CommBasicObjectsIDL::CommBatteryLevel &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element potential
	good_bit = good_bit && cdr.write_double(data.potential);
	// serialize list-element chargeLevel
	good_bit = good_bit && cdr.write_long(data.chargeLevel);
	// serialize list-element lifeTime
	good_bit = good_bit && cdr << data.lifeTime;
	// serialize list-element timeStamp
	good_bit = good_bit && cdr << data.timeStamp;
	// serialize list-element current
	good_bit = good_bit && cdr.write_double(data.current);
	// serialize list-element externalPower
	good_bit = good_bit && cdr.write_boolean(data.externalPower);
	
	return good_bit;
}

// de-serialization operator for element CommBatteryLevel
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, CommBasicObjectsIDL::CommBatteryLevel &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize type element potential
	good_bit = good_bit && cdr.read_double(data.potential);
	// deserialize type element chargeLevel
	good_bit = good_bit && cdr.read_long(data.chargeLevel);
	// deserialize type element lifeTime
	good_bit = good_bit && cdr >> data.lifeTime;
	// deserialize type element timeStamp
	good_bit = good_bit && cdr >> data.timeStamp;
	// deserialize type element current
	good_bit = good_bit && cdr.read_double(data.current);
	// deserialize type element externalPower
	good_bit = good_bit && cdr.read_boolean(data.externalPower);
	
	return good_bit;
}

// serialization operator for CommunicationObject CommBatteryLevel
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const CommBasicObjects::CommBatteryLevel &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject CommBatteryLevel
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, CommBasicObjects::CommBatteryLevel &obj)
{
	return cdr >> obj.set();
}
