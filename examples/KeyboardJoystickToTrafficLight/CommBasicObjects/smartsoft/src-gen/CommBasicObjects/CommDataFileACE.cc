//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "CommBasicObjects/CommDataFileACE.hh"
#include <ace/SString.h>
#include "CommBasicObjects/CommTimeStampACE.hh"

// serialization operator for element CommDataFile
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const CommBasicObjectsIDL::CommDataFile &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element filename
	good_bit = good_bit && cdr << ACE_CString(data.filename.c_str());
	// serialize list-element filesize
	good_bit = good_bit && cdr.write_ulong(data.filesize);
	// serialize list-element timestamp
	good_bit = good_bit && cdr << data.timestamp;
	// serialize list-element data
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.data.size());
	good_bit = good_bit && cdr.write_char_array(data.data.data(), data.data.size());
	// serialize list-element valid
	good_bit = good_bit && cdr.write_boolean(data.valid);
	
	return good_bit;
}

// de-serialization operator for element CommDataFile
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, CommBasicObjectsIDL::CommDataFile &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize string-type element filename
	ACE_CString data_filename_str;
	good_bit = good_bit && cdr >> data_filename_str;
	data.filename = data_filename_str.c_str();
	// deserialize type element filesize
	good_bit = good_bit && cdr.read_ulong(data.filesize);
	// deserialize type element timestamp
	good_bit = good_bit && cdr >> data.timestamp;
	// deserialize list-type element data
	ACE_CDR::ULong data_dataNbr;
	good_bit = good_bit && cdr >> data_dataNbr;
	data.data.resize(data_dataNbr);
	good_bit = good_bit && cdr.read_char_array(data.data.data(), data_dataNbr);
	// deserialize type element valid
	good_bit = good_bit && cdr.read_boolean(data.valid);
	
	return good_bit;
}

// serialization operator for CommunicationObject CommDataFile
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const CommBasicObjects::CommDataFile &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject CommDataFile
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, CommBasicObjects::CommDataFile &obj)
{
	return cdr >> obj.set();
}
