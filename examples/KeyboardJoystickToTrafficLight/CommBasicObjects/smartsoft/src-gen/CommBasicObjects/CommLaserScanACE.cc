//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "CommBasicObjects/CommLaserScanACE.hh"
#include <ace/SString.h>
#include "CommBasicObjects/LaserScanPointACE.hh"
#include "CommBasicObjects/CommTimeStampACE.hh"

// serialization operator for element CommLaserScan
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const CommBasicObjectsIDL::CommLaserScan &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element is_valid
	good_bit = good_bit && cdr.write_boolean(data.is_valid);
	// serialize list-element time
	good_bit = good_bit && cdr << data.time;
	// serialize list-element update_count
	good_bit = good_bit && cdr.write_ulonglong(data.update_count);
	// serialize list-element start_angle
	good_bit = good_bit && cdr.write_double(data.start_angle);
	// serialize list-element resolution
	good_bit = good_bit && cdr.write_double(data.resolution);
	// serialize list-element distance_min
	good_bit = good_bit && cdr.write_ushort(data.distance_min);
	// serialize list-element distance_max
	good_bit = good_bit && cdr.write_ushort(data.distance_max);
	// serialize list-element length_unit
	good_bit = good_bit && cdr.write_ushort(data.length_unit);
	// serialize list-element scan_points
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.scan_points.size());
	std::vector<CommBasicObjectsIDL::LaserScanPoint>::const_iterator data_scan_pointsIt;
	for(data_scan_pointsIt=data.scan_points.begin(); data_scan_pointsIt!=data.scan_points.end(); data_scan_pointsIt++) {
		good_bit = good_bit && cdr << *data_scan_pointsIt;
	}
	// serialize list-element max_scan_points
	good_bit = good_bit && cdr.write_ushort(data.max_scan_points);
	
	return good_bit;
}

// de-serialization operator for element CommLaserScan
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, CommBasicObjectsIDL::CommLaserScan &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize type element is_valid
	good_bit = good_bit && cdr.read_boolean(data.is_valid);
	// deserialize type element time
	good_bit = good_bit && cdr >> data.time;
	// deserialize string-type element update_count
	ACE_CDR::ULongLong data_update_count_ll;
	good_bit = good_bit && cdr.read_ulonglong(data_update_count_ll);
	data.update_count = data_update_count_ll;
	// deserialize type element start_angle
	good_bit = good_bit && cdr.read_double(data.start_angle);
	// deserialize type element resolution
	good_bit = good_bit && cdr.read_double(data.resolution);
	// deserialize type element distance_min
	good_bit = good_bit && cdr.read_ushort(data.distance_min);
	// deserialize type element distance_max
	good_bit = good_bit && cdr.read_ushort(data.distance_max);
	// deserialize type element length_unit
	good_bit = good_bit && cdr.read_ushort(data.length_unit);
	// deserialize list-type element scan_points
	ACE_CDR::ULong data_scan_pointsNbr;
	good_bit = good_bit && cdr >> data_scan_pointsNbr;
	data.scan_points.clear();
	CommBasicObjectsIDL::LaserScanPoint data_scan_pointsItem;
	for(ACE_CDR::ULong i=0; i<data_scan_pointsNbr; ++i) {
		good_bit = good_bit && cdr >> data_scan_pointsItem;
		data.scan_points.push_back(data_scan_pointsItem);
	}
	// deserialize type element max_scan_points
	good_bit = good_bit && cdr.read_ushort(data.max_scan_points);
	
	return good_bit;
}

// serialization operator for CommunicationObject CommLaserScan
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const CommBasicObjects::CommLaserScan &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject CommLaserScan
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, CommBasicObjects::CommLaserScan &obj)
{
	return cdr >> obj.set();
}
